{"version":3,"file":"sdk.esm.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/zap.ts","../src/router.ts","../src/bonusRouter.ts","../src/fetcher.ts","../src/zapV1.ts","../src/zapMigratorV1.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum ZapType {\n  ZAP,\n  ZAP_LP_MIGRATOR,\n  ZAP_LP_POOL,\n  ZAP_SINGLE_ASSET_POOL,\n  ZAP_T_BILL,\n  ZAP_MINI_APE\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport enum ChainId {\n  MAINNET = 1,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  TLOS = 40\n}\n\nexport enum SmartRouter {\n  APE = 'APE',\n  PANCAKE = 'PANCAKE',\n  BISWAP = 'BISWAP',\n  QUICKSWAP = 'QUICKSWAP',\n  UNISWAP = 'UNISWAP',\n  SUSHISWAP = 'SUSHISWAP'\n}\n\n// Each constant will need each chain and SmartRouter\n\n// Set the initial hash. Can find from factory\n\nexport const SMART_INIT_CODE_HASH: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0xe2200989b6f9506f3beca7e9c844741b3ad1a88ad978b6b0973e96d3ca4707aa',\n    [SmartRouter.UNISWAP]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [SmartRouter.SUSHISWAP]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n    [SmartRouter.PANCAKE]: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n    [SmartRouter.BISWAP]: '0xfea293c909d87cd4153593f077b76bb7e94340200f4ee84211ae8e4f9bd7ffdf'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n    [SmartRouter.QUICKSWAP]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0x7d4b9bb0d5808344c0184aada7d10aae8f6b0cc8ceb5eba8dd084f63b8c32099'\n  }\n}\n\n// Set the factory for each chain\n\nexport const SMART_FACTORY_ADDRESS: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n    [SmartRouter.UNISWAP]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    [SmartRouter.SUSHISWAP]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6',\n    [SmartRouter.PANCAKE]: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n    [SmartRouter.BISWAP]: '0x858E3312ed3A876947EA49d572A7C42DE08af7EE'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0x152349604d49c2af10adee94b918b051104a143e'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0xCf083Be4164828f00cAE704EC15a36D711491284',\n    [SmartRouter.QUICKSWAP]: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0xe145a77c21437e3FD32ce2731833114F0B53405b'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0x411172Dfcd5f68307656A1ff35520841C2F7fAec'\n  }\n}\n\n// Set the router for each chain\n\nexport const SMART_ROUTER_ADDRESS: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587',\n    [SmartRouter.UNISWAP]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n    [SmartRouter.SUSHISWAP]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0xcf0febd3f17cef5b47b0cd257acf6025c5bff3b7',\n    [SmartRouter.PANCAKE]: '0x10ED43C718714eb63d5aA57B78B54704E256024E',\n    [SmartRouter.BISWAP]: '0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0x3380ae82e39e42ca34ebed69af67faa0683bb5c1',\n    [SmartRouter.PANCAKE]: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607',\n    [SmartRouter.QUICKSWAP]: '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0x8fCf4B197A9Df7ab4ed511932cA6c8E1a8fe2F1d'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0xb9667Cf9A495A123b0C43B924f6c2244f42817BE'\n  }\n}\n\n// Set the bonus router for each chain\n\nexport const BONUS_ROUTER_ADDRESS: Record<ChainId, string> = {\n  [ChainId.MAINNET]: '0xb4aD8df313109caaF8Fdcde9094e9d1DE41252bc',\n  [ChainId.BSC]: '0x5471F99bCB8F682f4Fd2b463Fd3609DadD56A929',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MATIC]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.TLOS]: '0x1669Bb96A9a7eD0eB23B47AD61360d648A5Dade7'\n}\n\n// Set the zap address for each chain\n\nexport const ZAP_ADDRESS: Record<ChainId, string> = {\n  [ChainId.MAINNET]: '',\n  [ChainId.BSC]: '0x7E060D0e0563fbD4CD2b3B845a992Eab31e47f8b',\n  [ChainId.BSC_TESTNET]: '0xEe0e3270d2C62AC598E435212a5f87A431e4dDcF',\n  [ChainId.MATIC]: '0x236290f7da54465BF7A26f279d2B3553e5402780',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.TLOS]: '0x10614e4395AAc006ca0Ef4970d1412e8e921d911'\n}\n\n// TODO: Cleanup legacy code and swap constants on the FE\n\nexport const INIT_CODE_HASH: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xe2200989b6f9506f3beca7e9c844741b3ad1a88ad978b6b0973e96d3ca4707aa',\n  [ChainId.MATIC]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n  [ChainId.MATIC_TESTNET]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n  [ChainId.BSC]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n  [ChainId.BSC_TESTNET]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n  [ChainId.TLOS]: '0x7d4b9bb0d5808344c0184aada7d10aae8f6b0cc8ceb5eba8dd084f63b8c32099'\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n  [ChainId.MATIC]: '0xCf083Be4164828f00cAE704EC15a36D711491284',\n  [ChainId.MATIC_TESTNET]: '0xe145a77c21437e3FD32ce2731833114F0B53405b',\n  [ChainId.BSC]: '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6',\n  [ChainId.BSC_TESTNET]: '0x152349604d49c2af10adee94b918b051104a143e',\n  [ChainId.TLOS]: '0x411172Dfcd5f68307656A1ff35520841C2F7fAec'\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587',\n  [ChainId.MATIC]: '0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607',\n  [ChainId.MATIC_TESTNET]: '0x8fCf4B197A9Df7ab4ed511932cA6c8E1a8fe2F1d',\n  [ChainId.BSC]: '0xcf0febd3f17cef5b47b0cd257acf6025c5bff3b7',\n  [ChainId.BSC_TESTNET]: '0x3380ae82e39e42ca34ebed69af67faa0683bb5c1',\n  [ChainId.TLOS]: '0xb9667Cf9A495A123b0C43B924f6c2244f42817BE'\n}\n\nexport const MINI_APE_ADDRESS: Partial<Record<ChainId, string>> = {\n  [ChainId.MATIC]: '0x54aff400858Dcac39797a81894D9920f16972D1D'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ChainId, SolidityType } from '../constants'\n\nimport JSBI from 'jsbi'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly TLOS: Currency = new Currency(18, 'TLOS', 'Telos Coin')\n\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\n\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\n\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\n\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\n\n  public static readonly ONE: Currency = new Currency(18, 'ONE', 'Harmony')\n\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKExChain')\n\n  public static readonly NATIVE: Record<ChainId, Currency> = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\n    [ChainId.BSC]: Currency.BNB,\n    [ChainId.BSC_TESTNET]: Currency.BNB,\n    [ChainId.TLOS]: Currency.TLOS\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    if (this?.symbol === 'ETH') {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n\n    // if (this?.symbol === 'WETH') {\n    //   return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    // }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nexport { ETHER }\n","import { ChainId } from '../constants'\nimport { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// In reality this is a map of the wrapped version of the native token for a given network.\n// TODO: Rename to WNATIVE for sanity\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  // [ChainId.ROPSTEN]: new Token(\n  //   ChainId.ROPSTEN,\n  //   '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.RINKEBY]: new Token(\n  //   ChainId.RINKEBY,\n  //   '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  // [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  // [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\n  // [ChainId.FANTOM_TESTNET]: new Token(\n  //   ChainId.FANTOM_TESTNET,\n  //   '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  //   18,\n  //   'FTM',\n  //   'Wrapped FTM'\n  // ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9140243B6572728A142f3e26F9De52F21Be8155f',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  // [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.TLOS]: new Token(ChainId.TLOS, '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E', 18, 'WTLOS', 'Wrapped TLOS')\n  // [ChainId.ARBITRUM]: new Token(\n  //   ChainId.ARBITRUM,\n  //   '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.MOONBASE]: new Token(\n  //   ChainId.MOONBASE,\n  //   '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.AVALANCHE]: new Token(\n  //   ChainId.AVALANCHE,\n  //   '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  //   18,\n  //   'WAVAX',\n  //   'Wrapped AVAX'\n  // ),\n  // [ChainId.FUJI]: new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'),\n  // [ChainId.HECO]: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\n  // [ChainId.HECO_TESTNET]: new Token(\n  //   ChainId.HECO_TESTNET,\n  //   '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  //   18,\n  //   'WHT',\n  //   'Wrapped HT'\n  // ),\n  // [ChainId.HARMONY]: new Token(\n  //   ChainId.HARMONY,\n  //   '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  //   18,\n  //   'WONE',\n  //   'Wrapped ONE'\n  // ),\n  // [ChainId.HARMONY_TESTNET]: new Token(\n  //   ChainId.HARMONY_TESTNET,\n  //   '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  //   18,\n  //   'WONE',\n  //   'Wrapped ONE'\n  // ),\n  // [ChainId.OKEX]: new Token(\n  //   ChainId.OKEX,\n  //   '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  //   18,\n  //   'WOKT',\n  //   'Wrapped OKExChain'\n  // ),\n  // [ChainId.OKEX_TESTNET]: new Token(\n  //   ChainId.OKEX_TESTNET,\n  //   '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  //   18,\n  //   'WOKT',\n  //   'Wrapped OKExChain'\n  // )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _998,\n  _1000,\n  ChainId,\n  SmartRouter,\n  SMART_FACTORY_ADDRESS,\n  SMART_INIT_CODE_HASH\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [smartRouter: string]: { [token0Address: string]: { [token1Address: string]: string } } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly smartRouter: SmartRouter\n\n  public static getAddress(tokenA: Token, tokenB: Token, smartRouter: SmartRouter): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    // Need to add the smart router to cache or it will always return the cached address\n    if (PAIR_ADDRESS_CACHE?.[smartRouter]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [smartRouter]: {\n          ...PAIR_ADDRESS_CACHE?.[smartRouter],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[smartRouter]?.[tokens[0].address],\n            [tokens[1].address]: getCreate2Address(\n              SMART_FACTORY_ADDRESS[tokenA.chainId][smartRouter] || '',\n              keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n              SMART_INIT_CODE_HASH[tokenA.chainId][smartRouter] || ''\n            )\n          }\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[smartRouter][tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, smartRouter: SmartRouter) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, smartRouter),\n      18,\n      `${smartRouter || 'Ape'}-LP`,\n      `${smartRouter || 'Apeswap'} LPs`\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.smartRouter = smartRouter as SmartRouter\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Returns the current router of the pair\n   */\n\n  public get router(): SmartRouter {\n    return this.smartRouter\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.smartRouter)\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.smartRouter)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function ZapInputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function zapTradeComparator(a: Zap, b: Zap) {\n  const ioComp = ZapInputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestZapOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Zap {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public constructor(route: Route, amount: CurrencyAmount) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n    amounts[0] = wrappedAmount(amount, route.chainId)\n    for (let i = 0; i < route.path.length - 1; i++) {\n      const pair = route.pairs[i]\n      const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n      amounts[i + 1] = outputAmount\n      nextPairs[i] = nextPair\n    }\n    this.route = route\n    this.inputAmount = amount\n    this.outputAmount =\n      route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    const slippageAdjustedAmountOut = new Fraction(ONE)\n      .add(slippageTolerance)\n      .invert()\n      .multiply(this.outputAmount.raw).quotient\n    return this.outputAmount instanceof TokenAmount\n      ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n      : CurrencyAmount.ether(slippageAdjustedAmountOut)\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestZaps used in recursion; the current list of best trades\n   */\n  public static bestZapExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestZapOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestZaps: Zap[] = []\n  ): Zap[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestZaps,\n          new Zap(new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut), originalAmountIn),\n          maxNumResults,\n          zapTradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Zap.bestZapExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestZaps\n        )\n      }\n    }\n\n    return bestZaps\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface BonusTradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Add specific router to trade through\n   */\n  router: string\n\n  /**\n   * Master input for when there is an arb opportunity\n   */\n  masterInput: string\n}\n\nexport interface SmartTradeOptionsDeadline extends Omit<BonusTradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SmartSwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class BonusRouter {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: BonusTradeOptions | SmartTradeOptionsDeadline): SmartSwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const router: string = validateAndParseAddress(options.router)\n    const masterInput: string = options.masterInput\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId, SmartRouter } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    smartRouter: SmartRouter,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, smartRouter)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), smartRouter)\n  }\n}\n","import { ChainId, MINI_APE_ADDRESS, ZapType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, ETHER, Pair, Percent, Token, TokenAmount, WETH } from './entities'\nimport JSBI from 'jsbi'\n\n/**\n * Options for producing the arguments to send call to zap.\n */\nexport interface ZapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the zap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the zap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the zap.\n   */\n  recipient: string\n\n  zapType: ZapType\n\n  // When zapping into a contract we need to pass it\n  stakingContractAddress?: string\n\n  // PID for when staking into chef contracts\n  stakingPid?: string\n\n  // This is the max price for a bill to be zapped\n  maxPrice?: string\n}\n\nexport interface ZapOptionsDeadline extends Omit<ZapOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface ZapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | number[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\ntype CurrencyOut = {\n  outputCurrency: Token\n  path: Token[]\n  outputAmount: CurrencyAmount\n  minOutputAmount: string\n}\n\ntype MergedZap = {\n  currencyIn: {\n    currency: Currency\n    inputAmount: string | JSBI\n  }\n  currencyOut1: CurrencyOut\n  currencyOut2: CurrencyOut\n  pairOut: {\n    pair: Pair\n    minInAmount: { token1: string; token2: string }\n    totalPairSupply: TokenAmount\n    liquidityMinted: TokenAmount\n  }\n  chainId: ChainId\n}\n\nconst ZERO_HEX = '0x0'\n\nexport abstract class ZapV1 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param zap get zap values\n   * @param options options for the call parameters\n   */\n  public static zapCallParameters(zap: MergedZap, options: ZapOptions | ZapOptionsDeadline): ZapParameters {\n    invariant(zap, 'null Zap')\n\n    const { chainId, currencyIn, currencyOut1, currencyOut2, pairOut } = zap\n    const { zapType, maxPrice } = options\n\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const etherIn = currencyIn.currency === ETHER\n\n    const path1 = currencyOut1.path.map(token => token.address)\n    const path2 = currencyOut2.path.map(token => token.address)\n    const currencyInToken: Token = etherIn ? WETH[chainId] : (currencyIn?.currency as Token)\n    const to: string = validateAndParseAddress(options.recipient)\n    const stakingContractAddress = options?.stakingContractAddress\n    const stakingPid = options?.stakingPid\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[] | number[])[]\n    let value: string\n    switch (zapType) {\n      case ZapType.ZAP:\n        if (etherIn) {\n          methodName = 'zapNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            to,\n            deadline\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zap'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            to,\n            deadline\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_SINGLE_ASSET_POOL:\n        invariant(stakingContractAddress, 'Missing Pool Address')\n        if (etherIn) {\n          methodName = 'zapSingleAssetPoolNative'\n          args = [path1, currencyOut1.minOutputAmount, deadline, stakingContractAddress]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapSingleAssetPool'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            path1,\n            currencyOut1.minOutputAmount,\n            deadline,\n            stakingContractAddress\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_LP_POOL:\n        invariant(stakingContractAddress, 'Missing Pool Address')\n        if (etherIn) {\n          methodName = 'zapLPPoolNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapLPPool'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_T_BILL:\n        invariant(stakingContractAddress, 'Missing Bill Address')\n        if (etherIn) {\n          methodName = 'zapTBillNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress,\n            maxPrice || '0'\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapTBill'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress,\n            maxPrice || '0'\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_MINI_APE:\n        invariant(stakingPid, 'Missing contract PID')\n        if (etherIn) {\n          methodName = 'zapMiniApeV2Native'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            MINI_APE_ADDRESS[ChainId.MATIC] || '',\n            stakingPid\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapMiniApeV2'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            MINI_APE_ADDRESS[ChainId.MATIC] || '',\n            stakingPid\n          ]\n          value = ZERO_HEX\n        }\n        break\n      default:\n        methodName = ''\n        args = []\n        value = '0'\n    }\n    return { methodName, args, value }\n  }\n}\n","import { ChainId, SMART_ROUTER_ADDRESS } from './constants'\nimport invariant from 'tiny-invariant'\nimport { Pair, Percent } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface ZapMigratorOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n}\n\nexport interface ZapMigratorOptionsDeadline extends Omit<ZapMigratorOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface ZapMigratorParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | number[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\ntype MigratorZap = {\n  chainId: ChainId\n  zapLp: Pair\n  amount: string\n  amountAMinRemove: string\n  amountBMinRemove: string\n  amountAMinAdd: string\n  amountBMinAdd: string\n}\n\nconst ZERO_HEX = '0x0'\n\nexport abstract class ZapMigratorV1 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param zap get zap values\n   * @param options options for the call parameters\n   */\n  public static zapCallParameters(\n    zap: MigratorZap,\n    options: ZapMigratorOptions | ZapMigratorOptionsDeadline\n  ): ZapMigratorParameters {\n    invariant(zap, 'null Zap')\n\n    const { zapLp, amount, amountAMinRemove, amountBMinRemove, amountAMinAdd, amountBMinAdd, chainId } = zap\n    // If the smart router doesn't exist the call will fail\n    const routerAddress = SMART_ROUTER_ADDRESS[chainId][zapLp.router] || ''\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    return {\n      methodName: 'zapLPMigrator',\n      args: [\n        routerAddress,\n        zapLp.liquidityToken.address,\n        amount,\n        amountAMinRemove,\n        amountBMinRemove,\n        amountAMinAdd,\n        amountBMinAdd,\n        deadline\n      ],\n      value: ZERO_HEX\n    }\n  }\n}\n"],"names":["TradeType","ZapType","Rounding","ChainId","SmartRouter","SMART_INIT_CODE_HASH","MAINNET","APE","UNISWAP","SUSHISWAP","BSC","PANCAKE","BISWAP","BSC_TESTNET","MATIC","QUICKSWAP","MATIC_TESTNET","TLOS","SMART_FACTORY_ADDRESS","SMART_ROUTER_ADDRESS","BONUS_ROUTER_ADDRESS","ZAP_ADDRESS","INIT_CODE_HASH","FACTORY_ADDRESS","ROUTER_ADDRESS","MINI_APE_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","nativeCurrency","getNativeCurrencyName","getSymbol","getName","ETHER","BNB","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","fromRawAmount","rawAmount","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","smartRouter","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","ZapInputOutputComparator","zapTradeComparator","Zap","bestZapExactIn","bestZaps","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","BonusRouter","router","masterInput","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","ZapV1","zapCallParameters","zap","currencyOut1","currencyOut2","pairOut","zapType","maxPrice","path1","path2","currencyInToken","stakingContractAddress","stakingPid","ZAP","outputCurrency","minOutputAmount","minInAmount","token2","ZAP_SINGLE_ASSET_POOL","ZAP_LP_POOL","ZAP_T_BILL","ZAP_MINI_APE","ZapMigratorV1","zapLp","amountAMinRemove","amountBMinRemove","amountAMinAdd","amountBMinAdd","routerAddress"],"mappings":"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"}