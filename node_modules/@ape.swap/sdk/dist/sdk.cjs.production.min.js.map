{"version":3,"file":"sdk.cjs.production.min.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/zap.ts","../src/router.ts","../src/bonusRouter.ts","../src/fetcher.ts","../src/zapV1.ts","../src/zapMigratorV1.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum ZapType {\n  ZAP,\n  ZAP_LP_MIGRATOR,\n  ZAP_LP_POOL,\n  ZAP_SINGLE_ASSET_POOL,\n  ZAP_T_BILL,\n  ZAP_MINI_APE\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport enum ChainId {\n  MAINNET = 1,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  TLOS = 40\n}\n\nexport enum SmartRouter {\n  APE = 'APE',\n  PANCAKE = 'PANCAKE',\n  BISWAP = 'BISWAP',\n  QUICKSWAP = 'QUICKSWAP',\n  UNISWAP = 'UNISWAP',\n  SUSHISWAP = 'SUSHISWAP'\n}\n\n// Each constant will need each chain and SmartRouter\n\n// Set the initial hash. Can find from factory\n\nexport const SMART_INIT_CODE_HASH: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0xe2200989b6f9506f3beca7e9c844741b3ad1a88ad978b6b0973e96d3ca4707aa',\n    [SmartRouter.UNISWAP]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [SmartRouter.SUSHISWAP]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n    [SmartRouter.PANCAKE]: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n    [SmartRouter.BISWAP]: '0xfea293c909d87cd4153593f077b76bb7e94340200f4ee84211ae8e4f9bd7ffdf'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n    [SmartRouter.QUICKSWAP]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0x7d4b9bb0d5808344c0184aada7d10aae8f6b0cc8ceb5eba8dd084f63b8c32099'\n  }\n}\n\n// Set the factory for each chain\n\nexport const SMART_FACTORY_ADDRESS: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n    [SmartRouter.UNISWAP]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    [SmartRouter.SUSHISWAP]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6',\n    [SmartRouter.PANCAKE]: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n    [SmartRouter.BISWAP]: '0x858E3312ed3A876947EA49d572A7C42DE08af7EE'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0x152349604d49c2af10adee94b918b051104a143e'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0xCf083Be4164828f00cAE704EC15a36D711491284',\n    [SmartRouter.QUICKSWAP]: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0xe145a77c21437e3FD32ce2731833114F0B53405b'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0x411172Dfcd5f68307656A1ff35520841C2F7fAec'\n  }\n}\n\n// Set the router for each chain\n\nexport const SMART_ROUTER_ADDRESS: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587',\n    [SmartRouter.UNISWAP]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n    [SmartRouter.SUSHISWAP]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0xcf0febd3f17cef5b47b0cd257acf6025c5bff3b7',\n    [SmartRouter.PANCAKE]: '0x10ED43C718714eb63d5aA57B78B54704E256024E',\n    [SmartRouter.BISWAP]: '0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0x3380ae82e39e42ca34ebed69af67faa0683bb5c1',\n    [SmartRouter.PANCAKE]: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607',\n    [SmartRouter.QUICKSWAP]: '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0x8fCf4B197A9Df7ab4ed511932cA6c8E1a8fe2F1d'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0xb9667Cf9A495A123b0C43B924f6c2244f42817BE'\n  }\n}\n\n// Set the bonus router for each chain\n\nexport const BONUS_ROUTER_ADDRESS: Record<ChainId, string> = {\n  [ChainId.MAINNET]: '0xb4aD8df313109caaF8Fdcde9094e9d1DE41252bc',\n  [ChainId.BSC]: '0x5471F99bCB8F682f4Fd2b463Fd3609DadD56A929',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MATIC]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.TLOS]: '0x1669Bb96A9a7eD0eB23B47AD61360d648A5Dade7'\n}\n\n// Set the zap address for each chain\n\nexport const ZAP_ADDRESS: Record<ChainId, string> = {\n  [ChainId.MAINNET]: '',\n  [ChainId.BSC]: '0x7E060D0e0563fbD4CD2b3B845a992Eab31e47f8b',\n  [ChainId.BSC_TESTNET]: '0xEe0e3270d2C62AC598E435212a5f87A431e4dDcF',\n  [ChainId.MATIC]: '0x236290f7da54465BF7A26f279d2B3553e5402780',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.TLOS]: '0x10614e4395AAc006ca0Ef4970d1412e8e921d911'\n}\n\n// TODO: Cleanup legacy code and swap constants on the FE\n\nexport const INIT_CODE_HASH: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xe2200989b6f9506f3beca7e9c844741b3ad1a88ad978b6b0973e96d3ca4707aa',\n  [ChainId.MATIC]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n  [ChainId.MATIC_TESTNET]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n  [ChainId.BSC]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n  [ChainId.BSC_TESTNET]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n  [ChainId.TLOS]: '0x7d4b9bb0d5808344c0184aada7d10aae8f6b0cc8ceb5eba8dd084f63b8c32099'\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n  [ChainId.MATIC]: '0xCf083Be4164828f00cAE704EC15a36D711491284',\n  [ChainId.MATIC_TESTNET]: '0xe145a77c21437e3FD32ce2731833114F0B53405b',\n  [ChainId.BSC]: '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6',\n  [ChainId.BSC_TESTNET]: '0x152349604d49c2af10adee94b918b051104a143e',\n  [ChainId.TLOS]: '0x411172Dfcd5f68307656A1ff35520841C2F7fAec'\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587',\n  [ChainId.MATIC]: '0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607',\n  [ChainId.MATIC_TESTNET]: '0x8fCf4B197A9Df7ab4ed511932cA6c8E1a8fe2F1d',\n  [ChainId.BSC]: '0xcf0febd3f17cef5b47b0cd257acf6025c5bff3b7',\n  [ChainId.BSC_TESTNET]: '0x3380ae82e39e42ca34ebed69af67faa0683bb5c1',\n  [ChainId.TLOS]: '0xb9667Cf9A495A123b0C43B924f6c2244f42817BE'\n}\n\nexport const MINI_APE_ADDRESS: Partial<Record<ChainId, string>> = {\n  [ChainId.MATIC]: '0x54aff400858Dcac39797a81894D9920f16972D1D'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ChainId, SolidityType } from '../constants'\n\nimport JSBI from 'jsbi'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly TLOS: Currency = new Currency(18, 'TLOS', 'Telos Coin')\n\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\n\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\n\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\n\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\n\n  public static readonly ONE: Currency = new Currency(18, 'ONE', 'Harmony')\n\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKExChain')\n\n  public static readonly NATIVE: Record<ChainId, Currency> = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\n    [ChainId.BSC]: Currency.BNB,\n    [ChainId.BSC_TESTNET]: Currency.BNB,\n    [ChainId.TLOS]: Currency.TLOS\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    if (this?.symbol === 'ETH') {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n\n    // if (this?.symbol === 'WETH') {\n    //   return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    // }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nexport { ETHER }\n","import { ChainId } from '../constants'\nimport { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// In reality this is a map of the wrapped version of the native token for a given network.\n// TODO: Rename to WNATIVE for sanity\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  // [ChainId.ROPSTEN]: new Token(\n  //   ChainId.ROPSTEN,\n  //   '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.RINKEBY]: new Token(\n  //   ChainId.RINKEBY,\n  //   '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  // [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  // [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\n  // [ChainId.FANTOM_TESTNET]: new Token(\n  //   ChainId.FANTOM_TESTNET,\n  //   '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  //   18,\n  //   'FTM',\n  //   'Wrapped FTM'\n  // ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9140243B6572728A142f3e26F9De52F21Be8155f',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  // [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.TLOS]: new Token(ChainId.TLOS, '0xD102cE6A4dB07D247fcc28F366A623Df0938CA9E', 18, 'WTLOS', 'Wrapped TLOS')\n  // [ChainId.ARBITRUM]: new Token(\n  //   ChainId.ARBITRUM,\n  //   '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.MOONBASE]: new Token(\n  //   ChainId.MOONBASE,\n  //   '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.AVALANCHE]: new Token(\n  //   ChainId.AVALANCHE,\n  //   '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  //   18,\n  //   'WAVAX',\n  //   'Wrapped AVAX'\n  // ),\n  // [ChainId.FUJI]: new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'),\n  // [ChainId.HECO]: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\n  // [ChainId.HECO_TESTNET]: new Token(\n  //   ChainId.HECO_TESTNET,\n  //   '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  //   18,\n  //   'WHT',\n  //   'Wrapped HT'\n  // ),\n  // [ChainId.HARMONY]: new Token(\n  //   ChainId.HARMONY,\n  //   '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  //   18,\n  //   'WONE',\n  //   'Wrapped ONE'\n  // ),\n  // [ChainId.HARMONY_TESTNET]: new Token(\n  //   ChainId.HARMONY_TESTNET,\n  //   '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  //   18,\n  //   'WONE',\n  //   'Wrapped ONE'\n  // ),\n  // [ChainId.OKEX]: new Token(\n  //   ChainId.OKEX,\n  //   '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  //   18,\n  //   'WOKT',\n  //   'Wrapped OKExChain'\n  // ),\n  // [ChainId.OKEX_TESTNET]: new Token(\n  //   ChainId.OKEX_TESTNET,\n  //   '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  //   18,\n  //   'WOKT',\n  //   'Wrapped OKExChain'\n  // )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _998,\n  _1000,\n  ChainId,\n  SmartRouter,\n  SMART_FACTORY_ADDRESS,\n  SMART_INIT_CODE_HASH\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [smartRouter: string]: { [token0Address: string]: { [token1Address: string]: string } } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly smartRouter: SmartRouter\n\n  public static getAddress(tokenA: Token, tokenB: Token, smartRouter: SmartRouter): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    // Need to add the smart router to cache or it will always return the cached address\n    if (PAIR_ADDRESS_CACHE?.[smartRouter]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [smartRouter]: {\n          ...PAIR_ADDRESS_CACHE?.[smartRouter],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[smartRouter]?.[tokens[0].address],\n            [tokens[1].address]: getCreate2Address(\n              SMART_FACTORY_ADDRESS[tokenA.chainId][smartRouter] || '',\n              keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n              SMART_INIT_CODE_HASH[tokenA.chainId][smartRouter] || ''\n            )\n          }\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[smartRouter][tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, smartRouter: SmartRouter) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, smartRouter),\n      18,\n      `${smartRouter || 'Ape'}-LP`,\n      `${smartRouter || 'Apeswap'} LPs`\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.smartRouter = smartRouter as SmartRouter\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Returns the current router of the pair\n   */\n\n  public get router(): SmartRouter {\n    return this.smartRouter\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.smartRouter)\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.smartRouter)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function ZapInputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function zapTradeComparator(a: Zap, b: Zap) {\n  const ioComp = ZapInputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestZapOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Zap {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public constructor(route: Route, amount: CurrencyAmount) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n    amounts[0] = wrappedAmount(amount, route.chainId)\n    for (let i = 0; i < route.path.length - 1; i++) {\n      const pair = route.pairs[i]\n      const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n      amounts[i + 1] = outputAmount\n      nextPairs[i] = nextPair\n    }\n    this.route = route\n    this.inputAmount = amount\n    this.outputAmount =\n      route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    const slippageAdjustedAmountOut = new Fraction(ONE)\n      .add(slippageTolerance)\n      .invert()\n      .multiply(this.outputAmount.raw).quotient\n    return this.outputAmount instanceof TokenAmount\n      ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n      : CurrencyAmount.ether(slippageAdjustedAmountOut)\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestZaps used in recursion; the current list of best trades\n   */\n  public static bestZapExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestZapOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestZaps: Zap[] = []\n  ): Zap[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestZaps,\n          new Zap(new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut), originalAmountIn),\n          maxNumResults,\n          zapTradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Zap.bestZapExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestZaps\n        )\n      }\n    }\n\n    return bestZaps\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface BonusTradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Add specific router to trade through\n   */\n  router: string\n\n  /**\n   * Master input for when there is an arb opportunity\n   */\n  masterInput: string\n}\n\nexport interface SmartTradeOptionsDeadline extends Omit<BonusTradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SmartSwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class BonusRouter {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: BonusTradeOptions | SmartTradeOptionsDeadline): SmartSwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const router: string = validateAndParseAddress(options.router)\n    const masterInput: string = options.masterInput\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId, SmartRouter } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    smartRouter: SmartRouter,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, smartRouter)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), smartRouter)\n  }\n}\n","import { ChainId, MINI_APE_ADDRESS, ZapType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, ETHER, Pair, Percent, Token, TokenAmount, WETH } from './entities'\nimport JSBI from 'jsbi'\n\n/**\n * Options for producing the arguments to send call to zap.\n */\nexport interface ZapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the zap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the zap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the zap.\n   */\n  recipient: string\n\n  zapType: ZapType\n\n  // When zapping into a contract we need to pass it\n  stakingContractAddress?: string\n\n  // PID for when staking into chef contracts\n  stakingPid?: string\n\n  // This is the max price for a bill to be zapped\n  maxPrice?: string\n}\n\nexport interface ZapOptionsDeadline extends Omit<ZapOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface ZapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | number[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\ntype CurrencyOut = {\n  outputCurrency: Token\n  path: Token[]\n  outputAmount: CurrencyAmount\n  minOutputAmount: string\n}\n\ntype MergedZap = {\n  currencyIn: {\n    currency: Currency\n    inputAmount: string | JSBI\n  }\n  currencyOut1: CurrencyOut\n  currencyOut2: CurrencyOut\n  pairOut: {\n    pair: Pair\n    minInAmount: { token1: string; token2: string }\n    totalPairSupply: TokenAmount\n    liquidityMinted: TokenAmount\n  }\n  chainId: ChainId\n}\n\nconst ZERO_HEX = '0x0'\n\nexport abstract class ZapV1 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param zap get zap values\n   * @param options options for the call parameters\n   */\n  public static zapCallParameters(zap: MergedZap, options: ZapOptions | ZapOptionsDeadline): ZapParameters {\n    invariant(zap, 'null Zap')\n\n    const { chainId, currencyIn, currencyOut1, currencyOut2, pairOut } = zap\n    const { zapType, maxPrice } = options\n\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const etherIn = currencyIn.currency === ETHER\n\n    const path1 = currencyOut1.path.map(token => token.address)\n    const path2 = currencyOut2.path.map(token => token.address)\n    const currencyInToken: Token = etherIn ? WETH[chainId] : (currencyIn?.currency as Token)\n    const to: string = validateAndParseAddress(options.recipient)\n    const stakingContractAddress = options?.stakingContractAddress\n    const stakingPid = options?.stakingPid\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[] | number[])[]\n    let value: string\n    switch (zapType) {\n      case ZapType.ZAP:\n        if (etherIn) {\n          methodName = 'zapNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            to,\n            deadline\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zap'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            to,\n            deadline\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_SINGLE_ASSET_POOL:\n        invariant(stakingContractAddress, 'Missing Pool Address')\n        if (etherIn) {\n          methodName = 'zapSingleAssetPoolNative'\n          args = [path1, currencyOut1.minOutputAmount, deadline, stakingContractAddress]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapSingleAssetPool'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            path1,\n            currencyOut1.minOutputAmount,\n            deadline,\n            stakingContractAddress\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_LP_POOL:\n        invariant(stakingContractAddress, 'Missing Pool Address')\n        if (etherIn) {\n          methodName = 'zapLPPoolNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapLPPool'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_T_BILL:\n        invariant(stakingContractAddress, 'Missing Bill Address')\n        if (etherIn) {\n          methodName = 'zapTBillNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress,\n            maxPrice || '0'\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapTBill'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress,\n            maxPrice || '0'\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_MINI_APE:\n        invariant(stakingPid, 'Missing contract PID')\n        if (etherIn) {\n          methodName = 'zapMiniApeV2Native'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            MINI_APE_ADDRESS[ChainId.MATIC] || '',\n            stakingPid\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapMiniApeV2'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            MINI_APE_ADDRESS[ChainId.MATIC] || '',\n            stakingPid\n          ]\n          value = ZERO_HEX\n        }\n        break\n      default:\n        methodName = ''\n        args = []\n        value = '0'\n    }\n    return { methodName, args, value }\n  }\n}\n","import { ChainId, SMART_ROUTER_ADDRESS } from './constants'\nimport invariant from 'tiny-invariant'\nimport { Pair, Percent } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface ZapMigratorOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n}\n\nexport interface ZapMigratorOptionsDeadline extends Omit<ZapMigratorOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface ZapMigratorParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | number[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\ntype MigratorZap = {\n  chainId: ChainId\n  zapLp: Pair\n  amount: string\n  amountAMinRemove: string\n  amountBMinRemove: string\n  amountAMinAdd: string\n  amountBMinAdd: string\n}\n\nconst ZERO_HEX = '0x0'\n\nexport abstract class ZapMigratorV1 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param zap get zap values\n   * @param options options for the call parameters\n   */\n  public static zapCallParameters(\n    zap: MigratorZap,\n    options: ZapMigratorOptions | ZapMigratorOptionsDeadline\n  ): ZapMigratorParameters {\n    invariant(zap, 'null Zap')\n\n    const { zapLp, amount, amountAMinRemove, amountBMinRemove, amountAMinAdd, amountBMinAdd, chainId } = zap\n    // If the smart router doesn't exist the call will fail\n    const routerAddress = SMART_ROUTER_ADDRESS[chainId][zapLp.router] || ''\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    return {\n      methodName: 'zapLPMigrator',\n      args: [\n        routerAddress,\n        zapLp.liquidityToken.address,\n        amount,\n        amountAMinRemove,\n        amountBMinRemove,\n        amountAMinAdd,\n        amountBMinAdd,\n        deadline\n      ],\n      value: ZERO_HEX\n    }\n  }\n}\n"],"names":["TradeType","ZapType","Rounding","ChainId","SmartRouter","SolidityType","SMART_INIT_CODE_HASH","MAINNET","APE","UNISWAP","SUSHISWAP","BSC","PANCAKE","BISWAP","BSC_TESTNET","MATIC","QUICKSWAP","MATIC_TESTNET","TLOS","SMART_FACTORY_ADDRESS","SMART_ROUTER_ADDRESS","BONUS_ROUTER_ADDRESS","ZAP_ADDRESS","INIT_CODE_HASH","FACTORY_ADDRESS","ROUTER_ADDRESS","MINI_APE_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","_this","name","constructor","setPrototypeOf","prototype","_inheritsLoose","Error","InsufficientInputAmountError","_this2","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","getAddress","error","parseBigintIsh","bigintIsh","toString","sqrt","y","x","z","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","this","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","getNativeCurrencyName","_proto","getSymbol","getName","ETHER","BNB","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","_createClass","key","get","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","fromRawAmount","rawAmount","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","_Fraction","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","smartRouter","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","_PAIR_ADDRESS_CACHE","_PAIR_ADDRESS_CACHE$s","_PAIR_ADDRESS_CACHE$s2","_PAIR_ADDRESS_CACHE2","_PAIR_ADDRESS_CACHE3","_PAIR_ADDRESS_CACHE3$","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","exactQuote","slippage","amounts","Array","nextPairs","EXACT_INPUT","i","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","_ref$maxNumResults","maxNumResults","_ref$maxHops","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","_ref2$maxNumResults","_ref2$maxHops","tokenIn","isInsufficientReservesError","ZapInputOutputComparator","zapTradeComparator","Zap","bestZapExactIn","bestZaps","toHex","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","methodName","args","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","BonusRouter","router","masterInput","TOKEN_DECIMALS_CACHE","0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","_TOKEN_DECIMALS_CACHE2","_TOKEN_DECIMALS_CACHE3","Contract","ERC20","then","_TOKEN_DECIMALS_CACHE4","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","ZapV1","zapCallParameters","zap","currencyOut1","currencyOut2","pairOut","zapType","maxPrice","path1","path2","currencyInToken","stakingContractAddress","stakingPid","ZAP","outputCurrency","minOutputAmount","minInAmount","token2","ZAP_SINGLE_ASSET_POOL","ZAP_LP_POOL","ZAP_T_BILL","ZAP_MINI_APE","ZapMigratorV1","zapLp","amountAMinRemove","amountBMinRemove","amountAMinAdd","amountBMinAdd","routerAddress"],"mappings":"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"}