{"version":3,"file":"sdk.cjs.development.js","sources":["../src/constants.ts","../src/errors.ts","../src/utils.ts","../src/entities/currency.ts","../src/entities/token.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/tokenAmount.ts","../src/entities/fractions/price.ts","../src/entities/pair.ts","../src/entities/route.ts","../src/entities/fractions/percent.ts","../src/entities/trade.ts","../src/entities/zap.ts","../src/router.ts","../src/bonusRouter.ts","../src/fetcher.ts","../src/zapV1.ts","../src/zapMigratorV1.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | bigint | string\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum ZapType {\n  ZAP,\n  ZAP_LP_MIGRATOR,\n  ZAP_LP_POOL,\n  ZAP_SINGLE_ASSET_POOL,\n  ZAP_T_BILL,\n  ZAP_MINI_APE\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport enum ChainId {\n  MAINNET = 1,\n  MATIC = 137,\n  MATIC_TESTNET = 80001,\n  BSC = 56,\n  BSC_TESTNET = 97,\n  TLOS = 40\n}\n\nexport enum SmartRouter {\n  APE = 'APE',\n  PANCAKE = 'PANCAKE',\n  BISWAP = 'BISWAP',\n  QUICKSWAP = 'QUICKSWAP',\n  UNISWAP = 'UNISWAP',\n  SUSHISWAP = 'SUSHISWAP'\n}\n\n// Each constant will need each chain and SmartRouter\n\n// Set the initial hash. Can find from factory\n\nexport const SMART_INIT_CODE_HASH: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0xe2200989b6f9506f3beca7e9c844741b3ad1a88ad978b6b0973e96d3ca4707aa',\n    [SmartRouter.UNISWAP]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f',\n    [SmartRouter.SUSHISWAP]: '0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n    [SmartRouter.PANCAKE]: '0x00fb7f630766e6a796048ea87d01acd3068e8ff67d078148a3fa3f4a84f69bd5',\n    [SmartRouter.BISWAP]: '0xfea293c909d87cd4153593f077b76bb7e94340200f4ee84211ae8e4f9bd7ffdf'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n    [SmartRouter.QUICKSWAP]: '0x96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0x7d4b9bb0d5808344c0184aada7d10aae8f6b0cc8ceb5eba8dd084f63b8c32099'\n  }\n}\n\n// Set the factory for each chain\n\nexport const SMART_FACTORY_ADDRESS: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n    [SmartRouter.UNISWAP]: '0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f',\n    [SmartRouter.SUSHISWAP]: '0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6',\n    [SmartRouter.PANCAKE]: '0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73',\n    [SmartRouter.BISWAP]: '0x858E3312ed3A876947EA49d572A7C42DE08af7EE'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0x152349604d49c2af10adee94b918b051104a143e'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0xCf083Be4164828f00cAE704EC15a36D711491284',\n    [SmartRouter.QUICKSWAP]: '0x5757371414417b8C6CAad45bAeF941aBc7d3Ab32'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0xe145a77c21437e3FD32ce2731833114F0B53405b'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0x411172Dfcd5f68307656A1ff35520841C2F7fAec'\n  }\n}\n\n// Set the router for each chain\n\nexport const SMART_ROUTER_ADDRESS: Record<ChainId, Partial<Record<SmartRouter, string>>> = {\n  [ChainId.MAINNET]: {\n    [SmartRouter.APE]: '0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587',\n    [SmartRouter.UNISWAP]: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',\n    [SmartRouter.SUSHISWAP]: '0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F'\n  },\n  [ChainId.BSC]: {\n    [SmartRouter.APE]: '0xcf0febd3f17cef5b47b0cd257acf6025c5bff3b7',\n    [SmartRouter.PANCAKE]: '0x10ED43C718714eb63d5aA57B78B54704E256024E',\n    [SmartRouter.BISWAP]: '0x3a6d8cA21D1CF76F653A67577FA0D27453350dD8'\n  },\n  [ChainId.BSC_TESTNET]: {\n    [SmartRouter.APE]: '0x3380ae82e39e42ca34ebed69af67faa0683bb5c1',\n    [SmartRouter.PANCAKE]: '0xD99D1c33F9fC3444f8101754aBC46c52416550D1'\n  },\n  [ChainId.MATIC]: {\n    [SmartRouter.APE]: '0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607',\n    [SmartRouter.QUICKSWAP]: '0xa5E0829CaCEd8fFDD4De3c43696c57F7D7A678ff'\n  },\n  [ChainId.MATIC_TESTNET]: {\n    [SmartRouter.APE]: '0x8fCf4B197A9Df7ab4ed511932cA6c8E1a8fe2F1d'\n  },\n  [ChainId.TLOS]: {\n    [SmartRouter.APE]: '0xb9667Cf9A495A123b0C43B924f6c2244f42817BE'\n  }\n}\n\n// Set the bonus router for each chain\n\nexport const BONUS_ROUTER_ADDRESS: Record<ChainId, string> = {\n  [ChainId.MAINNET]: '0xb4aD8df313109caaF8Fdcde9094e9d1DE41252bc',\n  [ChainId.BSC]: '0x5471F99bCB8F682f4Fd2b463Fd3609DadD56A929',\n  [ChainId.BSC_TESTNET]: '',\n  [ChainId.MATIC]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.TLOS]: '0x1669Bb96A9a7eD0eB23B47AD61360d648A5Dade7'\n}\n\n// Set the zap address for each chain\n\nexport const ZAP_ADDRESS: Record<ChainId, string> = {\n  [ChainId.MAINNET]: '',\n  [ChainId.BSC]: '0x7E060D0e0563fbD4CD2b3B845a992Eab31e47f8b',\n  [ChainId.BSC_TESTNET]: '0xEe0e3270d2C62AC598E435212a5f87A431e4dDcF',\n  [ChainId.MATIC]: '0x236290f7da54465BF7A26f279d2B3553e5402780',\n  [ChainId.MATIC_TESTNET]: '',\n  [ChainId.TLOS]: '0x10614e4395AAc006ca0Ef4970d1412e8e921d911'\n}\n\n// TODO: Cleanup legacy code and swap constants on the FE\n\nexport const INIT_CODE_HASH: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xe2200989b6f9506f3beca7e9c844741b3ad1a88ad978b6b0973e96d3ca4707aa',\n  [ChainId.MATIC]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n  [ChainId.MATIC_TESTNET]: '0x511f0f358fe530cda0859ec20becf391718fdf5a329be02f4c95361f3d6a42d8',\n  [ChainId.BSC]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n  [ChainId.BSC_TESTNET]: '0xf4ccce374816856d11f00e4069e7cada164065686fbef53c6167a63ec2fd8c5b',\n  [ChainId.TLOS]: '0x7d4b9bb0d5808344c0184aada7d10aae8f6b0cc8ceb5eba8dd084f63b8c32099'\n}\n\nexport const FACTORY_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0xBAe5dc9B19004883d0377419FeF3c2C8832d7d7B',\n  [ChainId.MATIC]: '0xCf083Be4164828f00cAE704EC15a36D711491284',\n  [ChainId.MATIC_TESTNET]: '0xe145a77c21437e3FD32ce2731833114F0B53405b',\n  [ChainId.BSC]: '0x0841BD0B734E4F5853f0dD8d7Ea041c241fb0Da6',\n  [ChainId.BSC_TESTNET]: '0x152349604d49c2af10adee94b918b051104a143e',\n  [ChainId.TLOS]: '0x411172Dfcd5f68307656A1ff35520841C2F7fAec'\n}\n\nexport const ROUTER_ADDRESS: { [chainId in ChainId]: string } = {\n  [ChainId.MAINNET]: '0x5f509a3C3F16dF2Fba7bF84dEE1eFbce6BB85587',\n  [ChainId.MATIC]: '0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607',\n  [ChainId.MATIC_TESTNET]: '0x8fCf4B197A9Df7ab4ed511932cA6c8E1a8fe2F1d',\n  [ChainId.BSC]: '0xcf0febd3f17cef5b47b0cd257acf6025c5bff3b7',\n  [ChainId.BSC_TESTNET]: '0x3380ae82e39e42ca34ebed69af67faa0683bb5c1',\n  [ChainId.TLOS]: '0xb9667Cf9A495A123b0C43B924f6c2244f42817BE'\n}\n\nexport const MINI_APE_ADDRESS: Partial<Record<ChainId, string>> = {\n  [ChainId.MATIC]: '0x54aff400858Dcac39797a81894D9920f16972D1D'\n}\n\nexport const MINIMUM_LIQUIDITY = JSBI.BigInt(1000)\n\n// exports for internal consumption\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\nexport const TWO = JSBI.BigInt(2)\nexport const THREE = JSBI.BigInt(3)\nexport const FIVE = JSBI.BigInt(5)\nexport const TEN = JSBI.BigInt(10)\nexport const _100 = JSBI.BigInt(100)\nexport const _998 = JSBI.BigInt(998)\nexport const _1000 = JSBI.BigInt(1000)\n\nexport enum SolidityType {\n  uint8 = 'uint8',\n  uint256 = 'uint256'\n}\n\nexport const SOLIDITY_TYPE_MAXIMA = {\n  [SolidityType.uint8]: JSBI.BigInt('0xff'),\n  [SolidityType.uint256]: JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n}\n","// see https://stackoverflow.com/a/41102306\nconst CAN_SET_PROTOTYPE = 'setPrototypeOf' in Object\n\n/**\n * Indicates that the pair has insufficient reserves for a desired output amount. I.e. the amount of output cannot be\n * obtained by sending any amount of input.\n */\nexport class InsufficientReservesError extends Error {\n  public readonly isInsufficientReservesError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n\n/**\n * Indicates that the input amount is too small to produce any amount of output. I.e. the amount of input sent is less\n * than the price of a single unit of output after fees.\n */\nexport class InsufficientInputAmountError extends Error {\n  public readonly isInsufficientInputAmountError: true = true\n\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    if (CAN_SET_PROTOTYPE) Object.setPrototypeOf(this, new.target.prototype)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport warning from 'tiny-warning'\nimport JSBI from 'jsbi'\nimport { getAddress } from '@ethersproject/address'\n\nimport { BigintIsh, ZERO, ONE, TWO, THREE, SolidityType, SOLIDITY_TYPE_MAXIMA } from './constants'\n\nexport function validateSolidityTypeInstance(value: JSBI, solidityType: SolidityType): void {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), `${value} is not a ${solidityType}.`)\n  invariant(JSBI.lessThanOrEqual(value, SOLIDITY_TYPE_MAXIMA[solidityType]), `${value} is not a ${solidityType}.`)\n}\n\n// warns if addresses are not checksummed\nexport function validateAndParseAddress(address: string): string {\n  try {\n    const checksummedAddress = getAddress(address)\n    warning(address === checksummedAddress, `${address} is not checksummed.`)\n    return checksummedAddress\n  } catch (error) {\n    invariant(false, `${address} is not a valid address.`)\n  }\n}\n\nexport function parseBigintIsh(bigintIsh: BigintIsh): JSBI {\n  return bigintIsh instanceof JSBI\n    ? bigintIsh\n    : typeof bigintIsh === 'bigint'\n    ? JSBI.BigInt(bigintIsh.toString())\n    : JSBI.BigInt(bigintIsh)\n}\n\n// mock the on-chain sqrt function\nexport function sqrt(y: JSBI): JSBI {\n  validateSolidityTypeInstance(y, SolidityType.uint256)\n  let z: JSBI = ZERO\n  let x: JSBI\n  if (JSBI.greaterThan(y, THREE)) {\n    z = y\n    x = JSBI.add(JSBI.divide(y, TWO), ONE)\n    while (JSBI.lessThan(x, z)) {\n      z = x\n      x = JSBI.divide(JSBI.add(JSBI.divide(y, x), x), TWO)\n    }\n  } else if (JSBI.notEqual(y, ZERO)) {\n    z = ONE\n  }\n  return z\n}\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import { ChainId, SolidityType } from '../constants'\n\nimport JSBI from 'jsbi'\nimport { validateSolidityTypeInstance } from '../utils'\n\n/**\n * A currency is any fungible financial instrument on Ethereum, including Ether and all ERC20 tokens.\n *\n * The only instance of the base class `Currency` is Ether.\n */\nexport class Currency {\n  public readonly decimals: number\n  public readonly symbol?: string\n  public readonly name?: string\n\n  public static readonly ETHER: Currency = new Currency(18, 'ETH', 'Ether')\n\n  public static readonly BNB: Currency = new Currency(18, 'BNB', 'Binance Coin')\n\n  public static readonly MATIC: Currency = new Currency(18, 'MATIC', 'Matic')\n\n  public static readonly TLOS: Currency = new Currency(18, 'TLOS', 'Telos Coin')\n\n  public static readonly FTM: Currency = new Currency(18, 'FTM', 'Fantom')\n\n  public static readonly XDAI: Currency = new Currency(18, 'XDAI', 'xDai')\n\n  public static readonly GLMR: Currency = new Currency(18, 'GLMR', 'Glimmer')\n\n  public static readonly AVAX: Currency = new Currency(18, 'AVAX', 'Avalanche')\n\n  public static readonly HT: Currency = new Currency(18, 'HT', 'Heco Token')\n\n  public static readonly ONE: Currency = new Currency(18, 'ONE', 'Harmony')\n\n  public static readonly OKT: Currency = new Currency(18, 'OKT', 'OKExChain')\n\n  public static readonly NATIVE: Record<ChainId, Currency> = {\n    [ChainId.MAINNET]: Currency.ETHER,\n    [ChainId.MATIC]: Currency.MATIC,\n    [ChainId.MATIC_TESTNET]: Currency.MATIC,\n    [ChainId.BSC]: Currency.BNB,\n    [ChainId.BSC_TESTNET]: Currency.BNB,\n    [ChainId.TLOS]: Currency.TLOS\n  }\n\n  /**\n   * Constructs an instance of the base class `Currency`. The only instance of the base class `Currency` is `Currency.ETHER`.\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(decimals: number, symbol?: string, name?: string) {\n    validateSolidityTypeInstance(JSBI.BigInt(decimals), SolidityType.uint8)\n\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  public static getNativeCurrency(chainId?: ChainId) {\n    if (!chainId) {\n      throw Error(`No chainId ${chainId}`)\n    }\n\n    if (!(chainId in Currency.NATIVE)) {\n      throw Error(`No native currency defined for chainId ${chainId}`)\n    }\n    return Currency.NATIVE[chainId]\n  }\n\n  public static getNativeCurrencySymbol(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.symbol\n  }\n\n  public static getNativeCurrencyName(chainId?: ChainId) {\n    const nativeCurrency = this.getNativeCurrency(chainId)\n    return nativeCurrency.name\n  }\n\n  public getSymbol(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.symbol\n    }\n\n    if (this?.symbol === 'ETH') {\n      return Currency.getNativeCurrencySymbol(chainId)\n    }\n\n    // if (this?.symbol === 'WETH') {\n    //   return `W${Currency.getNativeCurrencySymbol(chainId)}`\n    // }\n\n    return this?.symbol\n  }\n\n  public getName(chainId?: ChainId) {\n    if (!chainId) {\n      return this?.name\n    }\n\n    if (this?.name === 'Ether') {\n      return Currency.getNativeCurrencyName(chainId)\n    }\n\n    return this?.name\n  }\n}\n\nconst ETHER = Currency.ETHER\n\nexport { ETHER }\n","import { ChainId } from '../constants'\nimport { Currency } from './currency'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends Currency {\n  public readonly chainId: ChainId\n  public readonly address: string\n\n  public constructor(chainId: ChainId, address: string, decimals: number, symbol?: string, name?: string) {\n    super(decimals, symbol, name)\n    this.chainId = chainId\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Token): boolean {\n    // short circuit on reference equality\n    if (this === other) {\n      return true\n    }\n    return this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n}\n\n/**\n * Compares two currencies for equality\n */\nexport function currencyEquals(currencyA: Currency, currencyB: Currency): boolean {\n  if (currencyA instanceof Token && currencyB instanceof Token) {\n    return currencyA.equals(currencyB)\n  } else if (currencyA instanceof Token) {\n    return false\n  } else if (currencyB instanceof Token) {\n    return false\n  } else {\n    return currencyA === currencyB\n  }\n}\n\n// In reality this is a map of the wrapped version of the native token for a given network.\n// TODO: Rename to WNATIVE for sanity\nexport const WETH = {\n  [ChainId.MAINNET]: new Token(\n    ChainId.MAINNET,\n    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    18,\n    'WETH',\n    'Wrapped Ether'\n  ),\n  // [ChainId.ROPSTEN]: new Token(\n  //   ChainId.ROPSTEN,\n  //   '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.RINKEBY]: new Token(\n  //   ChainId.RINKEBY,\n  //   '0xc778417E063141139Fce010982780140Aa0cD5Ab',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.GÖRLI]: new Token(ChainId.GÖRLI, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  // [ChainId.KOVAN]: new Token(ChainId.KOVAN, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n  // [ChainId.FANTOM]: new Token(ChainId.FANTOM, '0x21be370D5312f44cB42ce377BC9b8a0cEF1A4C83', 18, 'WFTM', 'Wrapped FTM'),\n  // [ChainId.FANTOM_TESTNET]: new Token(\n  //   ChainId.FANTOM_TESTNET,\n  //   '0xf1277d1Ed8AD466beddF92ef448A132661956621',\n  //   18,\n  //   'FTM',\n  //   'Wrapped FTM'\n  // ),\n  [ChainId.MATIC]: new Token(\n    ChainId.MATIC,\n    '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  [ChainId.MATIC_TESTNET]: new Token(\n    ChainId.MATIC_TESTNET,\n    '0x9140243B6572728A142f3e26F9De52F21Be8155f',\n    18,\n    'WMATIC',\n    'Wrapped Matic'\n  ),\n  // [ChainId.XDAI]: new Token(ChainId.XDAI, '0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d', 18, 'WXDAI', 'Wrapped xDai'),\n  [ChainId.BSC]: new Token(ChainId.BSC, '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c', 18, 'WBNB', 'Wrapped BNB'),\n  [ChainId.BSC_TESTNET]: new Token(\n    ChainId.BSC_TESTNET,\n    '0xae13d989daC2f0dEbFf460aC112a837C89BAa7cd',\n    18,\n    'WBNB',\n    'Wrapped BNB'\n  ),\n  [ChainId.TLOS]: new Token(ChainId.TLOS, '0xd102ce6a4db07d247fcc28f366a623df0938ca9e', 18, 'WTLOS', 'Wrapped TLOS')\n  // [ChainId.ARBITRUM]: new Token(\n  //   ChainId.ARBITRUM,\n  //   '0xf8456e5e6A225C2C1D74D8C9a4cB2B1d5dc1153b',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.MOONBASE]: new Token(\n  //   ChainId.MOONBASE,\n  //   '0xe73763DB808ecCDC0E36bC8E32510ED126910394',\n  //   18,\n  //   'WETH',\n  //   'Wrapped Ether'\n  // ),\n  // [ChainId.AVALANCHE]: new Token(\n  //   ChainId.AVALANCHE,\n  //   '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n  //   18,\n  //   'WAVAX',\n  //   'Wrapped AVAX'\n  // ),\n  // [ChainId.FUJI]: new Token(ChainId.FUJI, '0xd00ae08403B9bbb9124bB305C09058E32C39A48c', 18, 'WAVAX', 'Wrapped AVAX'),\n  // [ChainId.HECO]: new Token(ChainId.HECO, '0x5545153CCFcA01fbd7Dd11C0b23ba694D9509A6F', 18, 'WHT', 'Wrapped HT'),\n  // [ChainId.HECO_TESTNET]: new Token(\n  //   ChainId.HECO_TESTNET,\n  //   '0x5B2DA6F42CA09C77D577a12BeaD0446148830687',\n  //   18,\n  //   'WHT',\n  //   'Wrapped HT'\n  // ),\n  // [ChainId.HARMONY]: new Token(\n  //   ChainId.HARMONY,\n  //   '0xcF664087a5bB0237a0BAd6742852ec6c8d69A27a',\n  //   18,\n  //   'WONE',\n  //   'Wrapped ONE'\n  // ),\n  // [ChainId.HARMONY_TESTNET]: new Token(\n  //   ChainId.HARMONY_TESTNET,\n  //   '0x7a2afac38517d512E55C0bCe3b6805c10a04D60F',\n  //   18,\n  //   'WONE',\n  //   'Wrapped ONE'\n  // ),\n  // [ChainId.OKEX]: new Token(\n  //   ChainId.OKEX,\n  //   '0x8F8526dbfd6E38E3D8307702cA8469Bae6C56C15',\n  //   18,\n  //   'WOKT',\n  //   'Wrapped OKExChain'\n  // ),\n  // [ChainId.OKEX_TESTNET]: new Token(\n  //   ChainId.OKEX_TESTNET,\n  //   '0x2219845942d28716c0F7C605765fABDcA1a7d9E0',\n  //   18,\n  //   'WOKT',\n  //   'Wrapped OKExChain'\n  // )\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { ONE } from '../../constants'\nimport { parseBigintIsh } from '../../utils'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = ONE) {\n    this.numerator = parseBigintIsh(numerator)\n    this.denominator = parseBigintIsh(denominator)\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = other instanceof Fraction ? other : new Fraction(parseBigintIsh(other))\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n}\n","import { currencyEquals } from '../token'\nimport { Currency, ETHER } from '../currency'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport _Big from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding, TEN, SolidityType } from '../../constants'\nimport { parseBigintIsh, validateSolidityTypeInstance } from '../../utils'\nimport { Fraction } from './fraction'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount extends Fraction {\n  public readonly currency: Currency\n\n  /**\n   * Helper that calls the constructor with the ETHER currency\n   * @param amount ether amount in wei\n   */\n  public static ether(amount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(ETHER, amount)\n  }\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  // amount _must_ be raw, i.e. in the native representation\n  protected constructor(currency: Currency, amount: BigintIsh) {\n    const parsedAmount = parseBigintIsh(amount)\n    validateSolidityTypeInstance(parsedAmount, SolidityType.uint256)\n\n    super(parsedAmount, JSBI.exponentiate(TEN, JSBI.BigInt(currency.decimals)))\n    this.currency = currency\n  }\n\n  public get raw(): JSBI {\n    return this.numerator\n  }\n\n  public add(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(this.currency, other.currency), 'TOKEN')\n    return new CurrencyAmount(this.currency, JSBI.subtract(this.raw, other.raw))\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(format)\n  }\n}\n","import { CurrencyAmount } from './currencyAmount'\nimport { Token } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh } from '../../constants'\n\nexport class TokenAmount extends CurrencyAmount {\n  public readonly token: Token\n\n  // amount _must_ be raw, i.e. in the native representation\n  public constructor(token: Token, amount: BigintIsh) {\n    super(token, amount)\n    this.token = token\n  }\n\n  public add(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.add(this.raw, other.raw))\n  }\n\n  public subtract(other: TokenAmount): TokenAmount {\n    invariant(this.token.equals(other.token), 'TOKEN')\n    return new TokenAmount(this.token, JSBI.subtract(this.raw, other.raw))\n  }\n}\n","import { Token } from '../token'\nimport { TokenAmount } from './tokenAmount'\nimport { currencyEquals } from '../token'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\n\nimport { BigintIsh, Rounding, TEN } from '../../constants'\nimport { Currency } from '../currency'\nimport { Route } from '../route'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price extends Fraction {\n  public readonly baseCurrency: Currency // input i.e. denominator\n  public readonly quoteCurrency: Currency // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  public static fromRoute(route: Route): Price {\n    const prices: Price[] = []\n    for (const [i, pair] of route.pairs.entries()) {\n      prices.push(\n        route.path[i].equals(pair.token0)\n          ? new Price(pair.reserve0.currency, pair.reserve1.currency, pair.reserve0.raw, pair.reserve1.raw)\n          : new Price(pair.reserve1.currency, pair.reserve0.currency, pair.reserve1.raw, pair.reserve0.raw)\n      )\n    }\n    return prices.slice(1).reduce((accumulator, currentValue) => accumulator.multiply(currentValue), prices[0])\n  }\n\n  // denominator and numerator _must_ be raw, i.e. in the native representation\n  public constructor(baseCurrency: Currency, quoteCurrency: Currency, denominator: BigintIsh, numerator: BigintIsh) {\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(TEN, JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(TEN, JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  public get raw(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n\n  public get adjusted(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public invert(): Price {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  public multiply(other: Price): Price {\n    invariant(currencyEquals(this.quoteCurrency, other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  // performs floor division on overflow\n  public quote(currencyAmount: CurrencyAmount): CurrencyAmount {\n    invariant(currencyEquals(currencyAmount.currency, this.baseCurrency), 'TOKEN')\n    if (this.quoteCurrency instanceof Token) {\n      return new TokenAmount(this.quoteCurrency, super.multiply(currencyAmount.raw).quotient)\n    }\n    return CurrencyAmount.ether(super.multiply(currencyAmount.raw).quotient)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjusted.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { pack, keccak256 } from '@ethersproject/solidity'\nimport { getCreate2Address } from '@ethersproject/address'\n\nimport {\n  BigintIsh,\n  MINIMUM_LIQUIDITY,\n  ZERO,\n  ONE,\n  FIVE,\n  _998,\n  _1000,\n  ChainId,\n  SmartRouter,\n  SMART_FACTORY_ADDRESS,\n  SMART_INIT_CODE_HASH\n} from '../constants'\nimport { sqrt, parseBigintIsh } from '../utils'\nimport { InsufficientReservesError, InsufficientInputAmountError } from '../errors'\nimport { Token } from './token'\n\nlet PAIR_ADDRESS_CACHE: { [smartRouter: string]: { [token0Address: string]: { [token1Address: string]: string } } } = {}\n\nexport class Pair {\n  public readonly liquidityToken: Token\n  private readonly tokenAmounts: [TokenAmount, TokenAmount]\n  private readonly smartRouter: SmartRouter\n\n  public static getAddress(tokenA: Token, tokenB: Token, smartRouter: SmartRouter): string {\n    const tokens = tokenA.sortsBefore(tokenB) ? [tokenA, tokenB] : [tokenB, tokenA] // does safety checks\n\n    // Need to add the smart router to cache or it will always return the cached address\n    if (PAIR_ADDRESS_CACHE?.[smartRouter]?.[tokens[0].address]?.[tokens[1].address] === undefined) {\n      PAIR_ADDRESS_CACHE = {\n        ...PAIR_ADDRESS_CACHE,\n        [smartRouter]: {\n          ...PAIR_ADDRESS_CACHE?.[smartRouter],\n          [tokens[0].address]: {\n            ...PAIR_ADDRESS_CACHE?.[smartRouter]?.[tokens[0].address],\n            [tokens[1].address]: getCreate2Address(\n              SMART_FACTORY_ADDRESS[tokenA.chainId][smartRouter] || '',\n              keccak256(['bytes'], [pack(['address', 'address'], [tokens[0].address, tokens[1].address])]),\n              SMART_INIT_CODE_HASH[tokenA.chainId][smartRouter] || ''\n            )\n          }\n        }\n      }\n    }\n\n    return PAIR_ADDRESS_CACHE[smartRouter][tokens[0].address][tokens[1].address]\n  }\n\n  public constructor(tokenAmountA: TokenAmount, tokenAmountB: TokenAmount, smartRouter: SmartRouter) {\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    this.liquidityToken = new Token(\n      tokenAmounts[0].token.chainId,\n      Pair.getAddress(tokenAmounts[0].token, tokenAmounts[1].token, smartRouter),\n      18,\n      `${smartRouter || 'Ape'}-LP`,\n      `${smartRouter || 'Apeswap'} LPs`\n    )\n    this.tokenAmounts = tokenAmounts as [TokenAmount, TokenAmount]\n    this.smartRouter = smartRouter as SmartRouter\n  }\n\n  /**\n   * Returns true if the token is either token0 or token1\n   * @param token to check\n   */\n  public involvesToken(token: Token): boolean {\n    return token.equals(this.token0) || token.equals(this.token1)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token0, i.e. the ratio of reserve1 to reserve0\n   */\n  public get token0Price(): Price {\n    return new Price(this.token0, this.token1, this.tokenAmounts[0].raw, this.tokenAmounts[1].raw)\n  }\n\n  /**\n   * Returns the current mid price of the pair in terms of token1, i.e. the ratio of reserve0 to reserve1\n   */\n  public get token1Price(): Price {\n    return new Price(this.token1, this.token0, this.tokenAmounts[1].raw, this.tokenAmounts[0].raw)\n  }\n\n  /**\n   * Returns the current router of the pair\n   */\n\n  public get router(): SmartRouter {\n    return this.smartRouter\n  }\n\n  /**\n   * Return the price of the given token in terms of the other token in the pair.\n   * @param token token to return price of\n   */\n  public priceOf(token: Token): Price {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.token0Price : this.token1Price\n  }\n\n  /**\n   * Returns the chain ID of the tokens in the pair.\n   */\n  public get chainId(): ChainId {\n    return this.token0.chainId\n  }\n\n  public get token0(): Token {\n    return this.tokenAmounts[0].token\n  }\n\n  public get token1(): Token {\n    return this.tokenAmounts[1].token\n  }\n\n  public get reserve0(): TokenAmount {\n    return this.tokenAmounts[0]\n  }\n\n  public get reserve1(): TokenAmount {\n    return this.tokenAmounts[1]\n  }\n\n  public reserveOf(token: Token): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    return token.equals(this.token0) ? this.reserve0 : this.reserve1\n  }\n\n  public getOutputAmount(inputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(inputAmount.token), 'TOKEN')\n    if (JSBI.equal(this.reserve0.raw, ZERO) || JSBI.equal(this.reserve1.raw, ZERO)) {\n      throw new InsufficientReservesError()\n    }\n    const inputReserve = this.reserveOf(inputAmount.token)\n    const outputReserve = this.reserveOf(inputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const inputAmountWithFee = JSBI.multiply(inputAmount.raw, _998)\n    const numerator = JSBI.multiply(inputAmountWithFee, outputReserve.raw)\n    const denominator = JSBI.add(JSBI.multiply(inputReserve.raw, _1000), inputAmountWithFee)\n    const outputAmount = new TokenAmount(\n      inputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.divide(numerator, denominator)\n    )\n    if (JSBI.equal(outputAmount.raw, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return [\n      outputAmount,\n      new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.smartRouter)\n    ]\n  }\n\n  public getInputAmount(outputAmount: TokenAmount): [TokenAmount, Pair] {\n    invariant(this.involvesToken(outputAmount.token), 'TOKEN')\n    if (\n      JSBI.equal(this.reserve0.raw, ZERO) ||\n      JSBI.equal(this.reserve1.raw, ZERO) ||\n      JSBI.greaterThanOrEqual(outputAmount.raw, this.reserveOf(outputAmount.token).raw)\n    ) {\n      throw new InsufficientReservesError()\n    }\n\n    const outputReserve = this.reserveOf(outputAmount.token)\n    const inputReserve = this.reserveOf(outputAmount.token.equals(this.token0) ? this.token1 : this.token0)\n    const numerator = JSBI.multiply(JSBI.multiply(inputReserve.raw, outputAmount.raw), _1000)\n    const denominator = JSBI.multiply(JSBI.subtract(outputReserve.raw, outputAmount.raw), _998)\n    const inputAmount = new TokenAmount(\n      outputAmount.token.equals(this.token0) ? this.token1 : this.token0,\n      JSBI.add(JSBI.divide(numerator, denominator), ONE)\n    )\n    return [\n      inputAmount,\n      new Pair(inputReserve.add(inputAmount), outputReserve.subtract(outputAmount), this.smartRouter)\n    ]\n  }\n\n  public getLiquidityMinted(\n    totalSupply: TokenAmount,\n    tokenAmountA: TokenAmount,\n    tokenAmountB: TokenAmount\n  ): TokenAmount {\n    invariant(totalSupply.token.equals(this.liquidityToken), 'LIQUIDITY')\n    const tokenAmounts = tokenAmountA.token.sortsBefore(tokenAmountB.token) // does safety checks\n      ? [tokenAmountA, tokenAmountB]\n      : [tokenAmountB, tokenAmountA]\n    invariant(tokenAmounts[0].token.equals(this.token0) && tokenAmounts[1].token.equals(this.token1), 'TOKEN')\n\n    let liquidity: JSBI\n    if (JSBI.equal(totalSupply.raw, ZERO)) {\n      liquidity = JSBI.subtract(sqrt(JSBI.multiply(tokenAmounts[0].raw, tokenAmounts[1].raw)), MINIMUM_LIQUIDITY)\n    } else {\n      const amount0 = JSBI.divide(JSBI.multiply(tokenAmounts[0].raw, totalSupply.raw), this.reserve0.raw)\n      const amount1 = JSBI.divide(JSBI.multiply(tokenAmounts[1].raw, totalSupply.raw), this.reserve1.raw)\n      liquidity = JSBI.lessThanOrEqual(amount0, amount1) ? amount0 : amount1\n    }\n    if (!JSBI.greaterThan(liquidity, ZERO)) {\n      throw new InsufficientInputAmountError()\n    }\n    return new TokenAmount(this.liquidityToken, liquidity)\n  }\n\n  public getLiquidityValue(\n    token: Token,\n    totalSupply: TokenAmount,\n    liquidity: TokenAmount,\n    feeOn: boolean = false,\n    kLast?: BigintIsh\n  ): TokenAmount {\n    invariant(this.involvesToken(token), 'TOKEN')\n    invariant(totalSupply.token.equals(this.liquidityToken), 'TOTAL_SUPPLY')\n    invariant(liquidity.token.equals(this.liquidityToken), 'LIQUIDITY')\n    invariant(JSBI.lessThanOrEqual(liquidity.raw, totalSupply.raw), 'LIQUIDITY')\n\n    let totalSupplyAdjusted: TokenAmount\n    if (!feeOn) {\n      totalSupplyAdjusted = totalSupply\n    } else {\n      invariant(!!kLast, 'K_LAST')\n      const kLastParsed = parseBigintIsh(kLast)\n      if (!JSBI.equal(kLastParsed, ZERO)) {\n        const rootK = sqrt(JSBI.multiply(this.reserve0.raw, this.reserve1.raw))\n        const rootKLast = sqrt(kLastParsed)\n        if (JSBI.greaterThan(rootK, rootKLast)) {\n          const numerator = JSBI.multiply(totalSupply.raw, JSBI.subtract(rootK, rootKLast))\n          const denominator = JSBI.add(JSBI.multiply(rootK, FIVE), rootKLast)\n          const feeLiquidity = JSBI.divide(numerator, denominator)\n          totalSupplyAdjusted = totalSupply.add(new TokenAmount(this.liquidityToken, feeLiquidity))\n        } else {\n          totalSupplyAdjusted = totalSupply\n        }\n      } else {\n        totalSupplyAdjusted = totalSupply\n      }\n    }\n\n    return new TokenAmount(\n      token,\n      JSBI.divide(JSBI.multiply(liquidity.raw, this.reserveOf(token).raw), totalSupplyAdjusted.raw)\n    )\n  }\n}\n","import { ChainId } from '../constants'\nimport invariant from 'tiny-invariant'\n\nimport { Currency, ETHER } from './currency'\nimport { Token, WETH } from './token'\nimport { Pair } from './pair'\nimport { Price } from './fractions/price'\n\nexport class Route {\n  public readonly pairs: Pair[]\n  public readonly path: Token[]\n  public readonly input: Currency\n  public readonly output: Currency\n  public readonly midPrice: Price\n\n  public constructor(pairs: Pair[], input: Currency, output?: Currency) {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(\n      pairs.every(pair => pair.chainId === pairs[0].chainId),\n      'CHAIN_IDS'\n    )\n    invariant(\n      (input instanceof Token && pairs[0].involvesToken(input)) ||\n        (input === ETHER && pairs[0].involvesToken(WETH[pairs[0].chainId])),\n      'INPUT'\n    )\n    invariant(\n      typeof output === 'undefined' ||\n        (output instanceof Token && pairs[pairs.length - 1].involvesToken(output)) ||\n        (output === ETHER && pairs[pairs.length - 1].involvesToken(WETH[pairs[0].chainId])),\n      'OUTPUT'\n    )\n\n    const path: Token[] = [input instanceof Token ? input : WETH[pairs[0].chainId]]\n    for (const [i, pair] of pairs.entries()) {\n      const currentInput = path[i]\n      invariant(currentInput.equals(pair.token0) || currentInput.equals(pair.token1), 'PATH')\n      const output = currentInput.equals(pair.token0) ? pair.token1 : pair.token0\n      path.push(output)\n    }\n\n    this.pairs = pairs\n    this.path = path\n    this.midPrice = Price.fromRoute(this)\n    this.input = input\n    this.output = output ?? path[path.length - 1]\n  }\n\n  public get chainId(): ChainId {\n    return this.pairs[0].chainId\n  }\n}\n","import { Rounding, _100 } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst _100_PERCENT = new Fraction(_100)\n\nexport class Percent extends Fraction {\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return this.multiply(_100_PERCENT).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, TradeType, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function inputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function tradeComparator(a: Trade, b: Trade) {\n  const ioComp = inputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestTradeOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Trade {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The type of the trade, either exact in or exact out.\n   */\n  public readonly tradeType: TradeType\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  /**\n   * Constructs an exact in trade with the given amount in and route\n   * @param route route of the exact in trade\n   * @param amountIn the amount being passed in\n   */\n  public static exactIn(route: Route, amountIn: CurrencyAmount): Trade {\n    return new Trade(route, amountIn, TradeType.EXACT_INPUT)\n  }\n\n  /**\n   * Constructs an exact out trade with the given amount out and route\n   * @param route route of the exact out trade\n   * @param amountOut the amount returned by the trade\n   */\n  public static exactOut(route: Route, amountOut: CurrencyAmount): Trade {\n    return new Trade(route, amountOut, TradeType.EXACT_OUTPUT)\n  }\n\n  public constructor(route: Route, amount: CurrencyAmount, tradeType: TradeType) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    if (tradeType === TradeType.EXACT_INPUT) {\n      invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n      amounts[0] = wrappedAmount(amount, route.chainId)\n      for (let i = 0; i < route.path.length - 1; i++) {\n        const pair = route.pairs[i]\n        const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n        amounts[i + 1] = outputAmount\n        nextPairs[i] = nextPair\n      }\n    } else {\n      invariant(currencyEquals(amount.currency, route.output), 'OUTPUT')\n      amounts[amounts.length - 1] = wrappedAmount(amount, route.chainId)\n      for (let i = route.path.length - 1; i > 0; i--) {\n        const pair = route.pairs[i - 1]\n        const [inputAmount, nextPair] = pair.getInputAmount(amounts[i])\n        amounts[i - 1] = inputAmount\n        nextPairs[i - 1] = nextPair\n      }\n    }\n\n    this.route = route\n    this.tradeType = tradeType\n    this.inputAmount =\n      tradeType === TradeType.EXACT_INPUT\n        ? amount\n        : route.input === ETHER\n        ? CurrencyAmount.ether(amounts[0].raw)\n        : amounts[0]\n    this.outputAmount =\n      tradeType === TradeType.EXACT_OUTPUT\n        ? amount\n        : route.output === ETHER\n        ? CurrencyAmount.ether(amounts[amounts.length - 1].raw)\n        : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return this.outputAmount\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(this.outputAmount.raw).quotient\n      return this.outputAmount instanceof TokenAmount\n        ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n        : CurrencyAmount.ether(slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public maximumAmountIn(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return this.inputAmount\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(this.inputAmount.raw).quotient\n      return this.inputAmount instanceof TokenAmount\n        ? new TokenAmount(this.inputAmount.token, slippageAdjustedAmountIn)\n        : CurrencyAmount.ether(slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut),\n            originalAmountIn,\n            TradeType.EXACT_INPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n\n  /**\n   * similar to the above method but instead targets a fixed output amount\n   * given a list of pairs, and a fixed amount out, returns the top `maxNumResults` trades that go from an input token\n   * to an output token amount, making at most `maxHops` hops\n   * note this does not consider aggregation, as routes are linear. it's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyIn the currency to spend\n   * @param currencyAmountOut the exact amount of currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountOut used in recursion; the original value of the currencyAmountOut parameter\n   * @param bestTrades used in recursion; the current list of best trades\n   */\n  public static bestTradeExactOut(\n    pairs: Pair[],\n    currencyIn: Currency,\n    currencyAmountOut: CurrencyAmount,\n    { maxNumResults = 3, maxHops = 3 }: BestTradeOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountOut: CurrencyAmount = currencyAmountOut,\n    bestTrades: Trade[] = []\n  ): Trade[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountOut === currencyAmountOut || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountOut instanceof TokenAmount\n        ? currencyAmountOut.token.chainId\n        : currencyIn instanceof Token\n        ? currencyIn.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountOut = wrappedAmount(currencyAmountOut, chainId)\n    const tokenIn = wrappedCurrency(currencyIn, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountOut.token) && !pair.token1.equals(amountOut.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountIn: TokenAmount\n      try {\n        ;[amountIn] = pair.getInputAmount(amountOut)\n      } catch (error) {\n        // not enough liquidity in this pair\n        if (error.isInsufficientReservesError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the input token, so this is the first trade of one of the paths\n      if (amountIn.token.equals(tokenIn)) {\n        sortedInsert(\n          bestTrades,\n          new Trade(\n            new Route([pair, ...currentPairs], currencyIn, originalAmountOut.currency),\n            originalAmountOut,\n            TradeType.EXACT_OUTPUT\n          ),\n          maxNumResults,\n          tradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that arrive at this token as long as we have not exceeded maxHops\n        Trade.bestTradeExactOut(\n          pairsExcludingThisPair,\n          currencyIn,\n          amountIn,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [pair, ...currentPairs],\n          originalAmountOut,\n          bestTrades\n        )\n      }\n    }\n\n    return bestTrades\n  }\n}\n","import invariant from 'tiny-invariant'\n\nimport { ChainId, ONE, ZERO } from '../constants'\nimport { sortedInsert } from '../utils'\nimport { Currency, ETHER } from './currency'\nimport { CurrencyAmount } from './fractions/currencyAmount'\nimport { Fraction } from './fractions/fraction'\nimport { Percent } from './fractions/percent'\nimport { Price } from './fractions/price'\nimport { TokenAmount } from './fractions/tokenAmount'\nimport { Pair } from './pair'\nimport { Route } from './route'\nimport { currencyEquals, Token, WETH } from './token'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nfunction computePriceImpact(midPrice: Price, inputAmount: CurrencyAmount, outputAmount: CurrencyAmount): Percent {\n  const exactQuote = midPrice.raw.multiply(inputAmount.raw)\n  // calculate slippage := (exactQuote - outputAmount) / exactQuote\n  const slippage = exactQuote.subtract(outputAmount.raw).divide(exactQuote)\n  return new Percent(slippage.numerator, slippage.denominator)\n}\n\n// minimal interface so the input output comparator may be shared across types\ninterface InputOutput {\n  readonly inputAmount: CurrencyAmount\n  readonly outputAmount: CurrencyAmount\n}\n\n// comparator function that allows sorting trades by their output amounts, in decreasing order, and then input amounts\n// in increasing order. i.e. the best trades have the most outputs for the least inputs and are sorted first\nexport function ZapInputOutputComparator(a: InputOutput, b: InputOutput): number {\n  // must have same input and output token for comparison\n  invariant(currencyEquals(a.inputAmount.currency, b.inputAmount.currency), 'INPUT_CURRENCY')\n  invariant(currencyEquals(a.outputAmount.currency, b.outputAmount.currency), 'OUTPUT_CURRENCY')\n  if (a.outputAmount.equalTo(b.outputAmount)) {\n    if (a.inputAmount.equalTo(b.inputAmount)) {\n      return 0\n    }\n    // trade A requires less input than trade B, so A should come first\n    if (a.inputAmount.lessThan(b.inputAmount)) {\n      return -1\n    } else {\n      return 1\n    }\n  } else {\n    // tradeA has less output than trade B, so should come second\n    if (a.outputAmount.lessThan(b.outputAmount)) {\n      return 1\n    } else {\n      return -1\n    }\n  }\n}\n\n// extension of the input output comparator that also considers other dimensions of the trade in ranking them\nexport function zapTradeComparator(a: Zap, b: Zap) {\n  const ioComp = ZapInputOutputComparator(a, b)\n  if (ioComp !== 0) {\n    return ioComp\n  }\n\n  // consider lowest slippage next, since these are less likely to fail\n  if (a.priceImpact.lessThan(b.priceImpact)) {\n    return -1\n  } else if (a.priceImpact.greaterThan(b.priceImpact)) {\n    return 1\n  }\n\n  // finally consider the number of hops since each hop costs gas\n  return a.route.path.length - b.route.path.length\n}\n\nexport interface BestZapOptions {\n  // how many results to return\n  maxNumResults?: number\n  // the maximum number of hops a trade should contain\n  maxHops?: number\n}\n\n/**\n * Given a currency amount and a chain ID, returns the equivalent representation as the token amount.\n * In other words, if the currency is ETHER, returns the WETH token amount for the given chain. Otherwise, returns\n * the input currency amount.\n */\nfunction wrappedAmount(currencyAmount: CurrencyAmount, chainId: ChainId): TokenAmount {\n  if (currencyAmount instanceof TokenAmount) return currencyAmount\n  if (currencyAmount.currency === ETHER) return new TokenAmount(WETH[chainId], currencyAmount.raw)\n  invariant(false, 'CURRENCY')\n}\n\nfunction wrappedCurrency(currency: Currency, chainId: ChainId): Token {\n  if (currency instanceof Token) return currency\n  if (currency === ETHER) return WETH[chainId]\n  invariant(false, 'CURRENCY')\n}\n\n/**\n * Represents a trade executed against a list of pairs.\n * Does not account for slippage, i.e. trades that front run this trade and move the price.\n */\nexport class Zap {\n  /**\n   * The route of the trade, i.e. which pairs the trade goes through.\n   */\n  public readonly route: Route\n  /**\n   * The input amount for the trade assuming no slippage.\n   */\n  public readonly inputAmount: CurrencyAmount\n  /**\n   * The output amount for the trade assuming no slippage.\n   */\n  public readonly outputAmount: CurrencyAmount\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public readonly executionPrice: Price\n  /**\n   * The mid price after the trade executes assuming no slippage.\n   */\n  public readonly nextMidPrice: Price\n  /**\n   * The percent difference between the mid price before the trade and the trade execution price.\n   */\n  public readonly priceImpact: Percent\n\n  public constructor(route: Route, amount: CurrencyAmount) {\n    const amounts: TokenAmount[] = new Array(route.path.length)\n    const nextPairs: Pair[] = new Array(route.pairs.length)\n    invariant(currencyEquals(amount.currency, route.input), 'INPUT')\n    amounts[0] = wrappedAmount(amount, route.chainId)\n    for (let i = 0; i < route.path.length - 1; i++) {\n      const pair = route.pairs[i]\n      const [outputAmount, nextPair] = pair.getOutputAmount(amounts[i])\n      amounts[i + 1] = outputAmount\n      nextPairs[i] = nextPair\n    }\n    this.route = route\n    this.inputAmount = amount\n    this.outputAmount =\n      route.output === ETHER ? CurrencyAmount.ether(amounts[amounts.length - 1].raw) : amounts[amounts.length - 1]\n    this.executionPrice = new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.inputAmount.raw,\n      this.outputAmount.raw\n    )\n    this.nextMidPrice = Price.fromRoute(new Route(nextPairs, route.input))\n    this.priceImpact = computePriceImpact(route.midPrice, this.inputAmount, this.outputAmount)\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance tolerance of unfavorable slippage from the execution price of this trade\n   */\n  public minimumAmountOut(slippageTolerance: Percent): CurrencyAmount {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    const slippageAdjustedAmountOut = new Fraction(ONE)\n      .add(slippageTolerance)\n      .invert()\n      .multiply(this.outputAmount.raw).quotient\n    return this.outputAmount instanceof TokenAmount\n      ? new TokenAmount(this.outputAmount.token, slippageAdjustedAmountOut)\n      : CurrencyAmount.ether(slippageAdjustedAmountOut)\n  }\n\n  /**\n   * Given a list of pairs, and a fixed amount in, returns the top `maxNumResults` trades that go from an input token\n   * amount to an output token, making at most `maxHops` hops.\n   * Note this does not consider aggregation, as routes are linear. It's possible a better route exists by splitting\n   * the amount in among multiple routes.\n   * @param pairs the pairs to consider in finding the best trade\n   * @param currencyAmountIn exact amount of input currency to spend\n   * @param currencyOut the desired currency out\n   * @param maxNumResults maximum number of results to return\n   * @param maxHops maximum number of hops a returned trade can make, e.g. 1 hop goes through a single pair\n   * @param currentPairs used in recursion; the current list of pairs\n   * @param originalAmountIn used in recursion; the original value of the currencyAmountIn parameter\n   * @param bestZaps used in recursion; the current list of best trades\n   */\n  public static bestZapExactIn(\n    pairs: Pair[],\n    currencyAmountIn: CurrencyAmount,\n    currencyOut: Currency,\n    { maxNumResults = 3, maxHops = 3 }: BestZapOptions = {},\n    // used in recursion.\n    currentPairs: Pair[] = [],\n    originalAmountIn: CurrencyAmount = currencyAmountIn,\n    bestZaps: Zap[] = []\n  ): Zap[] {\n    invariant(pairs.length > 0, 'PAIRS')\n    invariant(maxHops > 0, 'MAX_HOPS')\n    invariant(originalAmountIn === currencyAmountIn || currentPairs.length > 0, 'INVALID_RECURSION')\n    const chainId: ChainId | undefined =\n      currencyAmountIn instanceof TokenAmount\n        ? currencyAmountIn.token.chainId\n        : currencyOut instanceof Token\n        ? currencyOut.chainId\n        : undefined\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const amountIn = wrappedAmount(currencyAmountIn, chainId)\n    const tokenOut = wrappedCurrency(currencyOut, chainId)\n    for (let i = 0; i < pairs.length; i++) {\n      const pair = pairs[i]\n      // pair irrelevant\n      if (!pair.token0.equals(amountIn.token) && !pair.token1.equals(amountIn.token)) continue\n      if (pair.reserve0.equalTo(ZERO) || pair.reserve1.equalTo(ZERO)) continue\n\n      let amountOut: TokenAmount\n      try {\n        ;[amountOut] = pair.getOutputAmount(amountIn)\n      } catch (error) {\n        // input too low\n        if (error.isInsufficientInputAmountError) {\n          continue\n        }\n        throw error\n      }\n      // we have arrived at the output token, so this is the final trade of one of the paths\n      if (amountOut.token.equals(tokenOut)) {\n        sortedInsert(\n          bestZaps,\n          new Zap(new Route([...currentPairs, pair], originalAmountIn.currency, currencyOut), originalAmountIn),\n          maxNumResults,\n          zapTradeComparator\n        )\n      } else if (maxHops > 1 && pairs.length > 1) {\n        const pairsExcludingThisPair = pairs.slice(0, i).concat(pairs.slice(i + 1, pairs.length))\n\n        // otherwise, consider all the other paths that lead from this token as long as we have not exceeded maxHops\n        Zap.bestZapExactIn(\n          pairsExcludingThisPair,\n          amountOut,\n          currencyOut,\n          {\n            maxNumResults,\n            maxHops: maxHops - 1\n          },\n          [...currentPairs, pair],\n          originalAmountIn,\n          bestZaps\n        )\n      }\n    }\n\n    return bestZaps\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface TradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Whether any of the tokens in the path are fee on transfer tokens, which should be handled with special methods\n   */\n  feeOnTransfer?: boolean\n}\n\nexport interface TradeOptionsDeadline extends Omit<TradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class Router {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: TradeOptions | TradeOptionsDeadline): SwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    const useFeeOnTransfer = Boolean(options.feeOnTransfer)\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = useFeeOnTransfer ? 'swapExactETHForTokensSupportingFeeOnTransferTokens' : 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = useFeeOnTransfer ? 'swapExactTokensForETHSupportingFeeOnTransferTokens' : 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = useFeeOnTransfer\n            ? 'swapExactTokensForTokensSupportingFeeOnTransferTokens'\n            : 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        invariant(!useFeeOnTransfer, 'EXACT_OUT_FOT')\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, amountIn, path, to, deadline]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { TradeType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { CurrencyAmount, ETHER, Percent, Trade } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface BonusTradeOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n\n  /**\n   * Add specific router to trade through\n   */\n  router: string\n\n  /**\n   * Master input for when there is an arb opportunity\n   */\n  masterInput: string\n}\n\nexport interface SmartTradeOptionsDeadline extends Omit<BonusTradeOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface SmartSwapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\nfunction toHex(currencyAmount: CurrencyAmount) {\n  return `0x${currencyAmount.raw.toString(16)}`\n}\n\nconst ZERO_HEX = '0x0'\n\n/**\n * Represents the Uniswap V2 Router, and has static methods for helping execute trades.\n */\nexport abstract class BonusRouter {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trade to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapCallParameters(trade: Trade, options: BonusTradeOptions | SmartTradeOptionsDeadline): SmartSwapParameters {\n    const etherIn = trade.inputAmount.currency === ETHER\n    const etherOut = trade.outputAmount.currency === ETHER\n    // the router does not support both ether in and out\n    invariant(!(etherIn && etherOut), 'ETHER_IN_OUT')\n    invariant(!('ttl' in options) || options.ttl > 0, 'TTL')\n\n    const to: string = validateAndParseAddress(options.recipient)\n    const router: string = validateAndParseAddress(options.router)\n    const masterInput: string = options.masterInput\n    const amountIn: string = toHex(trade.maximumAmountIn(options.allowedSlippage))\n    const amountOut: string = toHex(trade.minimumAmountOut(options.allowedSlippage))\n    const path: string[] = trade.route.path.map(token => token.address)\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[])[]\n    let value: string\n    switch (trade.tradeType) {\n      case TradeType.EXACT_INPUT:\n        if (etherIn) {\n          methodName = 'swapExactETHForTokens'\n          // (uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapExactTokensForETH'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapExactTokensForTokens'\n          // (uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n          args = [amountIn, amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        }\n        break\n      case TradeType.EXACT_OUTPUT:\n        if (etherIn) {\n          methodName = 'swapETHForExactTokens'\n          // (uint amountOut, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = amountIn\n        } else if (etherOut) {\n          methodName = 'swapTokensForExactETH'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        } else {\n          methodName = 'swapTokensForExactTokens'\n          // (uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n          args = [amountOut, path, to, deadline, router, masterInput]\n          value = ZERO_HEX\n        }\n        break\n    }\n    return {\n      methodName,\n      args,\n      value\n    }\n  }\n}\n","import { Contract } from '@ethersproject/contracts'\nimport { getNetwork } from '@ethersproject/networks'\nimport { getDefaultProvider } from '@ethersproject/providers'\nimport { TokenAmount } from './entities/fractions/tokenAmount'\nimport { Pair } from './entities/pair'\nimport IUniswapV2Pair from '@uniswap/v2-core/build/IUniswapV2Pair.json'\nimport invariant from 'tiny-invariant'\nimport ERC20 from './abis/ERC20.json'\nimport { ChainId, SmartRouter } from './constants'\nimport { Token } from './entities/token'\n\nlet TOKEN_DECIMALS_CACHE: { [chainId: number]: { [address: string]: number } } = {\n  [ChainId.MAINNET]: {\n    '0xE0B7927c4aF23765Cb51314A0E0521A9645F0E2A': 9 // DGD\n  }\n}\n\n/**\n * Contains methods for constructing instances of pairs and tokens from on-chain data.\n */\nexport abstract class Fetcher {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  /**\n   * Fetch information for a given token on the given chain, using the given ethers provider.\n   * @param chainId chain of the token\n   * @param address address of the token on the chain\n   * @param provider provider used to fetch the token\n   * @param symbol optional symbol of the token\n   * @param name optional name of the token\n   */\n  public static async fetchTokenData(\n    chainId: ChainId,\n    address: string,\n    provider = getDefaultProvider(getNetwork(chainId)),\n    symbol?: string,\n    name?: string\n  ): Promise<Token> {\n    const parsedDecimals =\n      typeof TOKEN_DECIMALS_CACHE?.[chainId]?.[address] === 'number'\n        ? TOKEN_DECIMALS_CACHE[chainId][address]\n        : await new Contract(address, ERC20, provider).decimals().then((decimals: number): number => {\n            TOKEN_DECIMALS_CACHE = {\n              ...TOKEN_DECIMALS_CACHE,\n              [chainId]: {\n                ...TOKEN_DECIMALS_CACHE?.[chainId],\n                [address]: decimals\n              }\n            }\n            return decimals\n          })\n    return new Token(chainId, address, parsedDecimals, symbol, name)\n  }\n\n  /**\n   * Fetches information about a pair and constructs a pair from the given two tokens.\n   * @param tokenA first token\n   * @param tokenB second token\n   * @param provider the provider to use to fetch the data\n   */\n  public static async fetchPairData(\n    tokenA: Token,\n    tokenB: Token,\n    smartRouter: SmartRouter,\n    provider = getDefaultProvider(getNetwork(tokenA.chainId))\n  ): Promise<Pair> {\n    invariant(tokenA.chainId === tokenB.chainId, 'CHAIN_ID')\n    const address = Pair.getAddress(tokenA, tokenB, smartRouter)\n    const [reserves0, reserves1] = await new Contract(address, IUniswapV2Pair.abi, provider).getReserves()\n    const balances = tokenA.sortsBefore(tokenB) ? [reserves0, reserves1] : [reserves1, reserves0]\n    return new Pair(new TokenAmount(tokenA, balances[0]), new TokenAmount(tokenB, balances[1]), smartRouter)\n  }\n}\n","import { ChainId, MINI_APE_ADDRESS, ZapType } from './constants'\nimport invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from './utils'\nimport { Currency, CurrencyAmount, ETHER, Pair, Percent, Token, TokenAmount, WETH } from './entities'\nimport JSBI from 'jsbi'\n\n/**\n * Options for producing the arguments to send call to zap.\n */\nexport interface ZapOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the zap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the zap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the zap.\n   */\n  recipient: string\n\n  zapType: ZapType\n\n  // When zapping into a contract we need to pass it\n  stakingContractAddress?: string\n\n  // PID for when staking into chef contracts\n  stakingPid?: string\n\n  // This is the max price for a bill to be zapped\n  maxPrice?: string\n}\n\nexport interface ZapOptionsDeadline extends Omit<ZapOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface ZapParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | number[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\ntype CurrencyOut = {\n  outputCurrency: Token\n  path: Token[]\n  outputAmount: CurrencyAmount\n  minOutputAmount: string\n}\n\ntype MergedZap = {\n  currencyIn: {\n    currency: Currency\n    inputAmount: string | JSBI\n  }\n  currencyOut1: CurrencyOut\n  currencyOut2: CurrencyOut\n  pairOut: {\n    pair: Pair\n    minInAmount: { token1: string; token2: string }\n    totalPairSupply: TokenAmount\n    liquidityMinted: TokenAmount\n  }\n  chainId: ChainId\n}\n\nconst ZERO_HEX = '0x0'\n\nexport abstract class ZapV1 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param zap get zap values\n   * @param options options for the call parameters\n   */\n  public static zapCallParameters(zap: MergedZap, options: ZapOptions | ZapOptionsDeadline): ZapParameters {\n    invariant(zap, 'null Zap')\n\n    const { chainId, currencyIn, currencyOut1, currencyOut2, pairOut } = zap\n    const { zapType, maxPrice } = options\n\n    invariant(chainId !== undefined, 'CHAIN_ID')\n\n    const etherIn = currencyIn.currency === ETHER\n\n    const path1 = currencyOut1.path.map(token => token.address)\n    const path2 = currencyOut2.path.map(token => token.address)\n    const currencyInToken: Token = etherIn ? WETH[chainId] : (currencyIn?.currency as Token)\n    const to: string = validateAndParseAddress(options.recipient)\n    const stakingContractAddress = options?.stakingContractAddress\n    const stakingPid = options?.stakingPid\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    let methodName: string\n    let args: (string | string[] | number[])[]\n    let value: string\n    switch (zapType) {\n      case ZapType.ZAP:\n        if (etherIn) {\n          methodName = 'zapNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            to,\n            deadline\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zap'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            to,\n            deadline\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_SINGLE_ASSET_POOL:\n        invariant(stakingContractAddress, 'Missing Pool Address')\n        if (etherIn) {\n          methodName = 'zapSingleAssetPoolNative'\n          args = [path1, currencyOut1.minOutputAmount, deadline, stakingContractAddress]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapSingleAssetPool'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            path1,\n            currencyOut1.minOutputAmount,\n            deadline,\n            stakingContractAddress\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_LP_POOL:\n        invariant(stakingContractAddress, 'Missing Pool Address')\n        if (etherIn) {\n          methodName = 'zapLPPoolNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapLPPool'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_T_BILL:\n        invariant(stakingContractAddress, 'Missing Bill Address')\n        if (etherIn) {\n          methodName = 'zapTBillNative'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress,\n            maxPrice || '0'\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapTBill'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            stakingContractAddress,\n            maxPrice || '0'\n          ]\n          value = ZERO_HEX\n        }\n        break\n      case ZapType.ZAP_MINI_APE:\n        invariant(stakingPid, 'Missing contract PID')\n        if (etherIn) {\n          methodName = 'zapMiniApeV2Native'\n          args = [\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            MINI_APE_ADDRESS[ChainId.MATIC] || '',\n            stakingPid\n          ]\n          value = currencyIn.inputAmount.toString()\n        } else {\n          methodName = 'zapMiniApeV2'\n          args = [\n            currencyInToken.address,\n            currencyIn.inputAmount.toString(),\n            [currencyOut1.outputCurrency.address, currencyOut2.outputCurrency.address],\n            path1,\n            path2,\n            [currencyOut1.minOutputAmount, currencyOut2.minOutputAmount],\n            [pairOut.minInAmount.token1, pairOut.minInAmount.token2],\n            deadline,\n            MINI_APE_ADDRESS[ChainId.MATIC] || '',\n            stakingPid\n          ]\n          value = ZERO_HEX\n        }\n        break\n      default:\n        methodName = ''\n        args = []\n        value = '0'\n    }\n    return { methodName, args, value }\n  }\n}\n","import { ChainId, SMART_ROUTER_ADDRESS } from './constants'\nimport invariant from 'tiny-invariant'\nimport { Pair, Percent } from './entities'\n\n/**\n * Options for producing the arguments to send call to the router.\n */\nexport interface ZapMigratorOptions {\n  /**\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\n   */\n  allowedSlippage: Percent\n  /**\n   * How long the swap is valid until it expires, in seconds.\n   * This will be used to produce a `deadline` parameter which is computed from when the swap call parameters\n   * are generated.\n   */\n  ttl: number\n  /**\n   * The account that should receive the output of the swap.\n   */\n  recipient: string\n}\n\nexport interface ZapMigratorOptionsDeadline extends Omit<ZapMigratorOptions, 'ttl'> {\n  /**\n   * When the transaction expires.\n   * This is an atlernate to specifying the ttl, for when you do not want to use local time.\n   */\n  deadline: number\n}\n\n/**\n * The parameters to use in the call to the Uniswap V2 Router to execute a trade.\n */\nexport interface ZapMigratorParameters {\n  /**\n   * The method to call on the Uniswap V2 Router.\n   */\n  methodName: string\n  /**\n   * The arguments to pass to the method, all hex encoded.\n   */\n  args: (string | string[] | number[])[]\n  /**\n   * The amount of wei to send in hex.\n   */\n  value: string\n}\n\ntype MigratorZap = {\n  chainId: ChainId\n  zapLp: Pair\n  amount: string\n  amountAMinRemove: string\n  amountBMinRemove: string\n  amountAMinAdd: string\n  amountBMinAdd: string\n}\n\nconst ZERO_HEX = '0x0'\n\nexport abstract class ZapMigratorV1 {\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n  /**\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param zap get zap values\n   * @param options options for the call parameters\n   */\n  public static zapCallParameters(\n    zap: MigratorZap,\n    options: ZapMigratorOptions | ZapMigratorOptionsDeadline\n  ): ZapMigratorParameters {\n    invariant(zap, 'null Zap')\n\n    const { zapLp, amount, amountAMinRemove, amountBMinRemove, amountAMinAdd, amountBMinAdd, chainId } = zap\n    // If the smart router doesn't exist the call will fail\n    const routerAddress = SMART_ROUTER_ADDRESS[chainId][zapLp.router] || ''\n\n    const deadline =\n      'ttl' in options\n        ? `0x${(Math.floor(new Date().getTime() / 1000) + options.ttl).toString(16)}`\n        : `0x${options.deadline.toString(16)}`\n\n    return {\n      methodName: 'zapLPMigrator',\n      args: [\n        routerAddress,\n        zapLp.liquidityToken.address,\n        amount,\n        amountAMinRemove,\n        amountBMinRemove,\n        amountAMinAdd,\n        amountBMinAdd,\n        deadline\n      ],\n      value: ZERO_HEX\n    }\n  }\n}\n"],"names":["TradeType","ZapType","Rounding","ChainId","SmartRouter","SMART_INIT_CODE_HASH","MAINNET","APE","UNISWAP","SUSHISWAP","BSC","PANCAKE","BISWAP","BSC_TESTNET","MATIC","QUICKSWAP","MATIC_TESTNET","TLOS","SMART_FACTORY_ADDRESS","SMART_ROUTER_ADDRESS","BONUS_ROUTER_ADDRESS","ZAP_ADDRESS","INIT_CODE_HASH","FACTORY_ADDRESS","ROUTER_ADDRESS","MINI_APE_ADDRESS","MINIMUM_LIQUIDITY","JSBI","BigInt","ZERO","ONE","TWO","THREE","FIVE","TEN","_100","_998","_1000","SolidityType","SOLIDITY_TYPE_MAXIMA","uint8","uint256","CAN_SET_PROTOTYPE","Object","InsufficientReservesError","name","constructor","setPrototypeOf","prototype","Error","InsufficientInputAmountError","validateSolidityTypeInstance","value","solidityType","greaterThanOrEqual","invariant","lessThanOrEqual","validateAndParseAddress","address","checksummedAddress","getAddress","warning","error","parseBigintIsh","bigintIsh","toString","sqrt","y","z","x","greaterThan","add","divide","lessThan","notEqual","sortedInsert","items","maxSize","comparator","length","push","isFull","lo","hi","mid","splice","pop","Currency","decimals","symbol","getNativeCurrency","chainId","NATIVE","getNativeCurrencySymbol","nativeCurrency","getNativeCurrencyName","getSymbol","getName","ETHER","BNB","Token","equals","other","sortsBefore","toLowerCase","currencyEquals","currencyA","currencyB","WETH","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","invert","otherParsed","equal","multiply","subtract","equalTo","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","set","precision","quotient","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","amount","parsedAmount","exponentiate","ether","fromRawAmount","rawAmount","raw","toExact","TokenAmount","token","Price","baseCurrency","quoteCurrency","scalar","fromRoute","route","prices","pairs","entries","i","pair","path","token0","reserve0","reserve1","slice","reduce","accumulator","currentValue","fraction","quote","currencyAmount","adjusted","PAIR_ADDRESS_CACHE","Pair","tokenAmountA","tokenAmountB","smartRouter","tokenAmounts","liquidityToken","tokenA","tokenB","tokens","undefined","getCreate2Address","keccak256","pack","involvesToken","token1","priceOf","token0Price","token1Price","reserveOf","getOutputAmount","inputAmount","inputReserve","outputReserve","inputAmountWithFee","outputAmount","getInputAmount","getLiquidityMinted","totalSupply","liquidity","amount0","amount1","getLiquidityValue","feeOn","kLast","totalSupplyAdjusted","kLastParsed","rootK","rootKLast","feeLiquidity","Route","input","output","every","currentInput","midPrice","_100_PERCENT","Percent","computePriceImpact","exactQuote","slippage","inputOutputComparator","a","b","tradeComparator","ioComp","priceImpact","wrappedAmount","wrappedCurrency","Trade","tradeType","amounts","Array","nextPairs","EXACT_INPUT","nextPair","EXACT_OUTPUT","executionPrice","nextMidPrice","exactIn","amountIn","exactOut","amountOut","minimumAmountOut","slippageTolerance","slippageAdjustedAmountOut","maximumAmountIn","slippageAdjustedAmountIn","bestTradeExactIn","currencyAmountIn","currencyOut","currentPairs","originalAmountIn","bestTrades","maxNumResults","maxHops","tokenOut","isInsufficientInputAmountError","pairsExcludingThisPair","concat","bestTradeExactOut","currencyIn","currencyAmountOut","originalAmountOut","tokenIn","isInsufficientReservesError","ZapInputOutputComparator","zapTradeComparator","Zap","bestZapExactIn","bestZaps","toHex","ZERO_HEX","Router","swapCallParameters","trade","options","etherIn","etherOut","ttl","to","recipient","allowedSlippage","map","deadline","Math","floor","Date","getTime","useFeeOnTransfer","Boolean","feeOnTransfer","methodName","args","BonusRouter","router","masterInput","TOKEN_DECIMALS_CACHE","Fetcher","fetchTokenData","provider","parsedDecimals","getDefaultProvider","getNetwork","Contract","ERC20","then","fetchPairData","IUniswapV2Pair","abi","getReserves","reserves0","reserves1","balances","ZapV1","zapCallParameters","zap","currencyOut1","currencyOut2","pairOut","zapType","maxPrice","path1","path2","currencyInToken","stakingContractAddress","stakingPid","ZAP","outputCurrency","minOutputAmount","minInAmount","token2","ZAP_SINGLE_ASSET_POOL","ZAP_LP_POOL","ZAP_T_BILL","ZAP_MINI_APE","ZapMigratorV1","zapLp","amountAMinRemove","amountBMinRemove","amountAMinAdd","amountBMinAdd","routerAddress"],"mappings":"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"}